
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/game_script/scripts/Bullet_17_1.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '760f6oDlEdMuq2ISIY/AUgx', 'Bullet_17_1');
// game_script/scripts/Bullet_17_1.js

"use strict";

var o;

var $object = require("./Object");

var $countDownUtil = require("./CountDownUtil");

var $configContext = require("./ConfigContext");

var $gameContext = require("./GameContext");

var $gameSkillInfo = require("./GameSkillInfo");

var $enemyStatus = require("./EnemyStatus");

var p = cc._decorator;
var f = p.ccclass;
var h = (p.property, cc.size(0, 0), cc.Vec3.ZERO);

var m = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    e.targetId = -1;
    e.atk = 0;
    return e;
  }

  __extends(e, t);

  e.prototype.refreshBullet17 = function (t, e, i) {
    if (!this.skillParam) {
      this.skillParam = $gameContext["default"].ins.skillInfo.getSkillById(116);
    }

    this.targetId = t;
    h.x = i / 100;
    h.y = this.skillParam.guideLaserWidth;
    this.setScale(h);
    this.setAngle(e);
    this.atk = Math.ceil(0.5 * this.skillParam.skillAtk[$gameSkillInfo.Skill4Param.FINAL]);
  };

  e.prototype.onTrigger = function (t, e) {
    var i = t.object;

    if (!(i.id === this.targetId || this.node.scaleX <= 0)) {
      if (e === $object.Trigger.stay || e === $object.Trigger.enter) {
        if ($countDownUtil.CountDownUtil.time - i.getLastAtkTime(3) <= this.skillParam.guideLaserAtkInterval / $gameContext["default"].ins.gameRatio) {
          return;
        }

        i.setLastAtkTime(3, $countDownUtil.CountDownUtil.time);

        if (i.sufferAtk({
          id: 116,
          skillSpecialitys: $configContext["default"].instance.basicSkillConfigMap.get(116).skill_tpye,
          atk: this.atk
        })) {
          this.skillParam.addGuideLaserAtkAdd();
        }
      }

      if (e === $object.Trigger.enter) {
        if (this.skillParam.guideLaserBurnTime > 0) {
          var o = {
            type: $enemyStatus.EnemyDebuffType.BURN,
            timeLeft: this.skillParam.guideLaserBurnTime,
            value: this.skillParam.guideLaserBurnAtk[$gameSkillInfo.Skill4Param.FINAL]
          };
          i.sufferDebuff(o);
        }

        if (this.skillParam.guideLaserBack > 0) {
          o = {
            type: $enemyStatus.EnemyDebuffType.BACK,
            timeLeft: -1,
            value: this.skillParam.guideLaserBack
          };
          i.sufferDebuff(o);
        }
      }
    }
  };

  return __decorate([f], e);
}($object.cObject);

exports["default"] = m;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,