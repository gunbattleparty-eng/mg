
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/game_script/scripts/ConfigContext.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '9873bwK/hVIyZFbu2M86ndi', 'ConfigContext');
// game_script/scripts/ConfigContext.js

"use strict";

var $assetsLoader = require("./AssetsLoader");

var $assetsMap = require("./AssetsMap");

var $platform = require("./Platform");

var $seedUtil = require("./SeedUtil");

var $switchContext = require("./SwitchContext");

var u = function () {
  function t() {
    this.configUrl = "https://cooperation.sjyywy.com/web2/wuff/tower-defence/configs/v2";
    this.baseUrl = "https://cooperation.sjyywy.com/web2/glob_config/prod";
    this.isStartRemote = !0;
    this.isLoadedRemote = !1;
    this.enemyConfigs = [];
    this.skillConfigs = [];
    this.basicSkillConfigs = [];
    this.levelInfoConfigs = [];
    this.gemConfigs = [];
    this.skillUpgradeConfigs = [];
    this.gemSkillConfigs = [];
    this.equipmentConfigs = [];
    this.gemBoxConfigs = [];
    this.shopResConfigs = [];
    this.shopDiamondConfigs = [];
    this.taskConfigs = [];
    this.onlineConfigs = [];
    this.playerSkinConfigs = [];
    this.gunSkinConfigs = [];
    this.signConfigs = [];
    this.sweepConfigs = [];
    this.robotConfigs = [];
    this.eggConfigs = [];
    this.chanceConfig = [];
    this.weekCardConfigs = [];
    this.skillConfigsMap = new Map();
    this.basicSkillConfigMap = new Map();
    this.enemyConfigsMap = new Map();
    this.exchangeConfigs = [];
    this.adSwitchConfig = null;
    this.seedLevel = 0;
  }

  t.prototype.load = function () {
    return __awaiter(this, void 0, void 0, function () {
      var e = this;
      return __generator(this, function () {
        return [2, new Promise(function (i) {
          t.instance.loadConfigResJson(["/OrdinaryMonster_config", "/skill_config", "/jcskill_config", "/level_info_config", "/gemstone_config", "/skill_upgrade_config", "/gemstoneskill_config", "/equipment_config", "/TreasureChest_config", "/ResourceMall_config", "/DiamondMall_config", "/daytask_config", "/onlinereward_config", "/manskin_config", "/Gunskin_config", "/newman_config", "/Cradlebed_config", "/Petsskin_config", "/egg_configs", "/Chance_config", "/Weeklycard_config"], function (t) {
            e.enemyConfigs = t[0];
            e.skillConfigs = t[1];
            e.basicSkillConfigs = t[2];
            e.levelInfoConfigs = t[3];
            e.gemConfigs = t[4];
            e.skillUpgradeConfigs = t[5];
            e.gemSkillConfigs = t[6];
            e.equipmentConfigs = t[7];
            e.gemBoxConfigs = t[8];
            e.shopResConfigs = t[9];
            e.shopDiamondConfigs = t[10];
            e.taskConfigs = t[11];
            e.onlineConfigs = t[12];
            e.playerSkinConfigs = t[13];
            e.gunSkinConfigs = t[14];
            e.signConfigs = t[15];
            e.sweepConfigs = t[16];
            e.robotConfigs = t[17];
            e.eggConfigs = t[18];
            e.chanceConfig = t[19];
            e.weekCardConfigs = t[20];
            e.enemyConfigsMap.clear();

            for (var o = 0; o < e.enemyConfigs.length; o++) {
              var n = e.enemyConfigs[o];
              e.enemyConfigsMap.set(n.id, n);
            }

            e.skillConfigsMap.clear();

            for (o = 0; o < e.skillConfigs.length; o++) {
              n = e.skillConfigs[o];
              e.skillConfigsMap.set(n.id, n);
            }

            e.basicSkillConfigs.sort(function (t, e) {
              return t.score - e.score;
            });

            for (o = 0; o < e.basicSkillConfigs.length; o++) {
              n = e.basicSkillConfigs[o];
              e.basicSkillConfigMap.set(n.skillmaster_id, n);
            }

            e.shopDiamondConfigs.sort(function (t, e) {
              return t.sort - e.sort;
            });
            e.shopResConfigs.sort(function (t, e) {
              return t.sort - e.sort;
            });

            if (i) {
              i(null);
            }
          });
        })["catch"](function (t) {
          console.error(t);
        })];
      });
    });
  };

  t.prototype.loadRemote = function (e) {
    var i = this;
    i.isLoadedRemote = !0;
    i.adSwitchConfig = {
      "tt_open_shop_diamond": true,
      "wx_open_shop_diamond": true
    };
    i.exchangeConfigs = [{
      "id": 1,
      "name": "MGQ666",
      "tipsimg": [7],
      "num": [2],
      "channel": [1, 9, 6]
    }, {
      "id": 2,
      "name": "MGQ888",
      "tipsimg": [7],
      "num": [3],
      "channel": [1, 9, 6]
    }, {
      "id": 3,
      "name": "MGQ999",
      "tipsimg": [7],
      "num": [4],
      "channel": [1, 9, 6]
    }];

    if (e) {
      e();
    } // if (this.isStartRemote) {
    //     var o = new Date().getTime();
    //     var n = [
    //         this.baseUrl + "/ad_config" + $switchContext.SwitchContext.configId + ".json?sign=" + o,
    //         this.baseUrl + "/Redemptioncode_configs" + $switchContext.SwitchContext.configId + ".json?sign=" + o
    //     ];
    //     t.loadNetResArray(n, null)
    //         .then(function (t) {
    //             i.isLoadedRemote = !0;
    //             i.adSwitchConfig = t[0];
    //             i.exchangeConfigs = t[1];
    //             if (e) {
    //                 e();
    //             }
    //         })
    //         .catch(function () {
    //             if (e) {
    //                 e();
    //             }
    //         });
    // } else {
    //     if (e) {
    //         e();
    //     }
    // }

  };

  t.prototype.getAdSwitch = function (t) {
    return !(!this.adSwitchConfig || !this.adSwitchConfig[t]) && this.adSwitchConfig[t];
  };

  t.prototype.getAdSwitch2 = function (e) {
    var i = "";
    $platform.Platform.currPlatForm === $platform.PlatformEnum.TOU_TIAO ? i = "tt_" + e : $platform.Platform.currPlatForm === $platform.PlatformEnum.WECHAT && (i = "wx_" + e);
    return !("" !== i && !t.instance.getAdSwitch(i));
  };

  t.prototype.getEnemyConfig = function (t) {
    return this.enemyConfigs.find(function (e) {
      return e.id == t;
    });
  };

  t.prototype.loadConfigResJson = function (t, e) {
    var i = $assetsMap.BundleNames.Configs;
    $assetsLoader["default"].instance.loadRes(i, t, cc.JsonAsset, null, function (i, o) {
      if (o.length > 0) {
        var n = [];

        for (var s = 0; s < o.length; s++) {
          n.push(o[s].json);
          cc.assetManager.releaseAsset(o[s]);
        }

        if (e) {
          e(n);
        }
      } else {
        e && e(null);
        console.log("json为空:", t);
      }
    });
  };

  t.prototype.getConfigByLevel = function (e) {
    var i = this;

    if (this.levelInfoConfigs.length >= e) {
      this.seedLevel = e;
      return t.instance.levelInfoConfigs.find(function (t) {
        return t.id === e;
      });
    }

    $seedUtil["default"].init(e);
    this.seedLevel = $seedUtil["default"].randomFromSync(1, this.levelInfoConfigs.length);
    var o = t.instance.levelInfoConfigs.find(function (t) {
      return t.id === i.seedLevel;
    });
    var n = [];
    var s = [];

    for (var r = 0; r < o.addHP.length; r++) {
      var a = this.enemyConfigsMap.get(o.Monsterspool[r]);
      n.push(e * a.add_hp);
      s.push(e * a.add_atk);
    }

    return {
      id: e,
      Monsterspool: o.Monsterspool,
      addHP: n,
      addatk: s,
      EX: o.EX,
      EX_num: o.EX_num,
      EX_coefficient: o.EX_coefficient,
      rewardtype: o.rewardtype,
      reward_num: o.reward_num,
      gemstone_weight: o.gemstone_weight,
      TreasureChesttype: o.TreasureChesttype,
      TreasureChest_num: o.TreasureChest_num,
      phase_reward_time: o.phase_reward_time,
      phase_reward_num: o.phase_reward_num
    };
  };

  t.prototype.getSweepConfig = function (e) {
    if (this.levelInfoConfigs.length >= e) {
      this.seedLevel = e;
      return t.instance.sweepConfigs.find(function (t) {
        return t.id === e;
      });
    }

    $seedUtil["default"].init(e);
    this.seedLevel = $seedUtil["default"].randomFromSync(1, this.levelInfoConfigs.length);
    var i = e - this.levelInfoConfigs.length;
    var o = this.sweepConfigs[this.sweepConfigs.length - 1];
    var n = [];

    for (var s = 0; s < o.rewardnum.length; s++) {
      n.push(o.rewardnum[s] + i);
    }

    return {
      id: e,
      rewardnum: n
    };
  };

  t.loadNetResArray = function (t, e) {
    return __awaiter(this, void 0, Promise, function () {
      var i;
      var o;
      return __generator(this, function () {
        i = [];

        for (o = 0; o < t.length; o++) {
          i.push({
            url: t[o]
          });
        }

        return [2, new Promise(function (t, o) {
          cc.assetManager.loadAny(i, function (t, i) {
            if (e) {
              e(t, i);
            }
          }, function (e, i) {
            e ? o(e) : t(i);
          });
        })];
      });
    });
  };

  t.instance = new t();
  return t;
}();

exports["default"] = u;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcZ2FtZV9zY3JpcHRcXHNjcmlwdHNcXENvbmZpZ0NvbnRleHQuanMiXSwibmFtZXMiOlsiJGFzc2V0c0xvYWRlciIsInJlcXVpcmUiLCIkYXNzZXRzTWFwIiwiJHBsYXRmb3JtIiwiJHNlZWRVdGlsIiwiJHN3aXRjaENvbnRleHQiLCJ1IiwidCIsImNvbmZpZ1VybCIsImJhc2VVcmwiLCJpc1N0YXJ0UmVtb3RlIiwiaXNMb2FkZWRSZW1vdGUiLCJlbmVteUNvbmZpZ3MiLCJza2lsbENvbmZpZ3MiLCJiYXNpY1NraWxsQ29uZmlncyIsImxldmVsSW5mb0NvbmZpZ3MiLCJnZW1Db25maWdzIiwic2tpbGxVcGdyYWRlQ29uZmlncyIsImdlbVNraWxsQ29uZmlncyIsImVxdWlwbWVudENvbmZpZ3MiLCJnZW1Cb3hDb25maWdzIiwic2hvcFJlc0NvbmZpZ3MiLCJzaG9wRGlhbW9uZENvbmZpZ3MiLCJ0YXNrQ29uZmlncyIsIm9ubGluZUNvbmZpZ3MiLCJwbGF5ZXJTa2luQ29uZmlncyIsImd1blNraW5Db25maWdzIiwic2lnbkNvbmZpZ3MiLCJzd2VlcENvbmZpZ3MiLCJyb2JvdENvbmZpZ3MiLCJlZ2dDb25maWdzIiwiY2hhbmNlQ29uZmlnIiwid2Vla0NhcmRDb25maWdzIiwic2tpbGxDb25maWdzTWFwIiwiTWFwIiwiYmFzaWNTa2lsbENvbmZpZ01hcCIsImVuZW15Q29uZmlnc01hcCIsImV4Y2hhbmdlQ29uZmlncyIsImFkU3dpdGNoQ29uZmlnIiwic2VlZExldmVsIiwicHJvdG90eXBlIiwibG9hZCIsIl9fYXdhaXRlciIsImUiLCJfX2dlbmVyYXRvciIsIlByb21pc2UiLCJpIiwiaW5zdGFuY2UiLCJsb2FkQ29uZmlnUmVzSnNvbiIsImNsZWFyIiwibyIsImxlbmd0aCIsIm4iLCJzZXQiLCJpZCIsInNvcnQiLCJzY29yZSIsInNraWxsbWFzdGVyX2lkIiwiY29uc29sZSIsImVycm9yIiwibG9hZFJlbW90ZSIsImdldEFkU3dpdGNoIiwiZ2V0QWRTd2l0Y2gyIiwiUGxhdGZvcm0iLCJjdXJyUGxhdEZvcm0iLCJQbGF0Zm9ybUVudW0iLCJUT1VfVElBTyIsIldFQ0hBVCIsImdldEVuZW15Q29uZmlnIiwiZmluZCIsIkJ1bmRsZU5hbWVzIiwiQ29uZmlncyIsImxvYWRSZXMiLCJjYyIsIkpzb25Bc3NldCIsInMiLCJwdXNoIiwianNvbiIsImFzc2V0TWFuYWdlciIsInJlbGVhc2VBc3NldCIsImxvZyIsImdldENvbmZpZ0J5TGV2ZWwiLCJpbml0IiwicmFuZG9tRnJvbVN5bmMiLCJyIiwiYWRkSFAiLCJhIiwiZ2V0IiwiTW9uc3RlcnNwb29sIiwiYWRkX2hwIiwiYWRkX2F0ayIsImFkZGF0ayIsIkVYIiwiRVhfbnVtIiwiRVhfY29lZmZpY2llbnQiLCJyZXdhcmR0eXBlIiwicmV3YXJkX251bSIsImdlbXN0b25lX3dlaWdodCIsIlRyZWFzdXJlQ2hlc3R0eXBlIiwiVHJlYXN1cmVDaGVzdF9udW0iLCJwaGFzZV9yZXdhcmRfdGltZSIsInBoYXNlX3Jld2FyZF9udW0iLCJnZXRTd2VlcENvbmZpZyIsInJld2FyZG51bSIsImxvYWROZXRSZXNBcnJheSIsInVybCIsImxvYWRBbnkiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLGFBQWEsR0FBR0MsT0FBTyxDQUFDLGdCQUFELENBQTNCOztBQUNBLElBQUlDLFVBQVUsR0FBR0QsT0FBTyxDQUFDLGFBQUQsQ0FBeEI7O0FBQ0EsSUFBSUUsU0FBUyxHQUFHRixPQUFPLENBQUMsWUFBRCxDQUF2Qjs7QUFDQSxJQUFJRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyxZQUFELENBQXZCOztBQUNBLElBQUlJLGNBQWMsR0FBR0osT0FBTyxDQUFDLGlCQUFELENBQTVCOztBQUNBLElBQUlLLENBQUMsR0FBSSxZQUFXO0VBQ2hCLFNBQVNDLENBQVQsR0FBYTtJQUNULEtBQUtDLFNBQUwsR0FBaUIsbUVBQWpCO0lBQ0EsS0FBS0MsT0FBTCxHQUFlLHNEQUFmO0lBQ0EsS0FB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QUlMLE9BQUosQ0FBWSxVQUFTdEMsQ0FBVCxFQUFZMkMsQ0FBWixFQUFlO1VBQ3ZCdUIsRUFBRSxDQUFDSyxZQUFILENBQWdCNEIsT0FBaEIsQ0FDSTVELENBREosRUFFSSxVQUFTdkMsQ0FBVCxFQUFZdUMsQ0FBWixFQUFlO1lBQ1gsSUFBSUgsQ0FBSixFQUFPO2NBQ0hBLENBQUMsQ0FBQ3BDLENBQUQsRUFBSXVDLENBQUosQ0FBRDtZQUNIO1VBQ0osQ0FOTCxFQU9JLFVBQVNILENBQVQsRUFBWUcsQ0FBWixFQUFlO1lBQ1hILENBQUMsR0FBR08sQ0FBQyxDQUFDUCxDQUFELENBQUosR0FBVXBDLENBQUMsQ0FBQ3VDLENBQUQsQ0FBWjtVQUNILENBVEw7UUFXSCxDQVpELENBRkcsQ0FBUDtNQWdCSCxDQXZCaUIsQ0FBbEI7SUF3QkgsQ0EzQmUsQ0FBaEI7RUE0QkgsQ0E3QkQ7O0VBOEJBdkMsQ0FBQyxDQUFDd0MsUUFBRixHQUFhLElBQUl4QyxDQUFKLEVBQWI7RUFDQSxPQUFPQSxDQUFQO0FBQ0gsQ0F2VU8sRUFBUjs7QUF3VUFvRyxPQUFPLFdBQVAsR0FBa0JyRyxDQUFsQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyICRhc3NldHNMb2FkZXIgPSByZXF1aXJlKFwiLi9Bc3NldHNMb2FkZXJcIik7XHJcbnZhciAkYXNzZXRzTWFwID0gcmVxdWlyZShcIi4vQXNzZXRzTWFwXCIpO1xyXG52YXIgJHBsYXRmb3JtID0gcmVxdWlyZShcIi4vUGxhdGZvcm1cIik7XHJcbnZhciAkc2VlZFV0aWwgPSByZXF1aXJlKFwiLi9TZWVkVXRpbFwiKTtcclxudmFyICRzd2l0Y2hDb250ZXh0ID0gcmVxdWlyZShcIi4vU3dpdGNoQ29udGV4dFwiKTtcclxudmFyIHUgPSAoZnVuY3Rpb24oKSB7XHJcbiAgICBmdW5jdGlvbiB0KCkge1xyXG4gICAgICAgIHRoaXMuY29uZmlnVXJsID0gXCJodHRwczovL2Nvb3BlcmF0aW9uLnNqeXl3eS5jb20vd2ViMi93dWZmL3Rvd2VyLWRlZmVuY2UvY29uZmlncy92MlwiO1xyXG4gICAgICAgIHRoaXMuYmFzZVVybCA9IFwiaHR0cHM6Ly9jb29wZXJhdGlvbi5zanl5d3kuY29tL3dlYjIvZ2xvYl9jb25maWcvcHJvZFwiO1xyXG4gICAgICAgIHRoaXMuaXNTdGFydFJlbW90ZSA9ICEwO1xyXG4gICAgICAgIHRoaXMuaXNMb2FkZWRSZW1vdGUgPSAhMTtcclxuICAgICAgICB0aGlzLmVuZW15Q29uZmlncyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2tpbGxDb25maWdzID0gW107XHJcbiAgICAgICAgdGhpcy5iYXNpY1NraWxsQ29uZmlncyA9IFtdO1xyXG4gICAgICAgIHRoaXMubGV2ZWxJbmZvQ29uZmlncyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZ2VtQ29uZmlncyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2tpbGxVcGdyYWRlQ29uZmlncyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZ2VtU2tpbGxDb25maWdzID0gW107XHJcbiAgICAgICAgdGhpcy5lcXVpcG1lbnRDb25maWdzID0gW107XHJcbiAgICAgICAgdGhpcy5nZW1Cb3hDb25maWdzID0gW107XHJcbiAgICAgICAgdGhpcy5zaG9wUmVzQ29uZmlncyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2hvcERpYW1vbmRDb25maWdzID0gW107XHJcbiAgICAgICAgdGhpcy50YXNrQ29uZmlncyA9IFtdO1xyXG4gICAgICAgIHRoaXMub25saW5lQ29uZmlncyA9IFtdO1xyXG4gICAgICAgIHRoaXMucGxheWVyU2tpbkNvbmZpZ3MgPSBbXTtcclxuICAgICAgICB0aGlzLmd1blNraW5Db25maWdzID0gW107XHJcbiAgICAgICAgdGhpcy5zaWduQ29uZmlncyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc3dlZXBDb25maWdzID0gW107XHJcbiAgICAgICAgdGhpcy5yb2JvdENvbmZpZ3MgPSBbXTtcclxuICAgICAgICB0aGlzLmVnZ0NvbmZpZ3MgPSBbXTtcclxuICAgICAgICB0aGlzLmNoYW5jZUNvbmZpZyA9IFtdO1xyXG4gICAgICAgIHRoaXMud2Vla0NhcmRDb25maWdzID0gW107XHJcbiAgICAgICAgdGhpcy5za2lsbENvbmZpZ3NNYXAgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5iYXNpY1NraWxsQ29uZmlnTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuZW5lbXlDb25maWdzTWFwID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuZXhjaGFuZ2VDb25maWdzID0gW107XHJcbiAgICAgICAgdGhpcy5hZFN3aXRjaENvbmZpZyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zZWVkTGV2ZWwgPSAwO1xyXG4gICAgfVxyXG4gICAgdC5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgZSA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgMixcclxuICAgICAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZShmdW5jdGlvbihpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuaW5zdGFuY2UubG9hZENvbmZpZ1Jlc0pzb24oXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIvT3JkaW5hcnlNb25zdGVyX2NvbmZpZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiL3NraWxsX2NvbmZpZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiL2pjc2tpbGxfY29uZmlnXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIvbGV2ZWxfaW5mb19jb25maWdcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIi9nZW1zdG9uZV9jb25maWdcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIi9za2lsbF91cGdyYWRlX2NvbmZpZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiL2dlbXN0b25lc2tpbGxfY29uZmlnXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIvZXF1aXBtZW50X2NvbmZpZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiL1RyZWFzdXJlQ2hlc3RfY29uZmlnXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIvUmVzb3VyY2VNYWxsX2NvbmZpZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiL0RpYW1vbmRNYWxsX2NvbmZpZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiL2RheXRhc2tfY29uZmlnXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIvb25saW5lcmV3YXJkX2NvbmZpZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiL21hbnNraW5fY29uZmlnXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIvR3Vuc2tpbl9jb25maWdcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIi9uZXdtYW5fY29uZmlnXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIvQ3JhZGxlYmVkX2NvbmZpZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiL1BldHNza2luX2NvbmZpZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiL2VnZ19jb25maWdzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIvQ2hhbmNlX2NvbmZpZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiL1dlZWtseWNhcmRfY29uZmlnXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5lbmVteUNvbmZpZ3MgPSB0WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc2tpbGxDb25maWdzID0gdFsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmJhc2ljU2tpbGxDb25maWdzID0gdFsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmxldmVsSW5mb0NvbmZpZ3MgPSB0WzNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuZ2VtQ29uZmlncyA9IHRbNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5za2lsbFVwZ3JhZGVDb25maWdzID0gdFs1XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmdlbVNraWxsQ29uZmlncyA9IHRbNl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5lcXVpcG1lbnRDb25maWdzID0gdFs3XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmdlbUJveENvbmZpZ3MgPSB0WzhdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc2hvcFJlc0NvbmZpZ3MgPSB0WzldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc2hvcERpYW1vbmRDb25maWdzID0gdFsxMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS50YXNrQ29uZmlncyA9IHRbMTFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUub25saW5lQ29uZmlncyA9IHRbMTJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucGxheWVyU2tpbkNvbmZpZ3MgPSB0WzEzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmd1blNraW5Db25maWdzID0gdFsxNF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zaWduQ29uZmlncyA9IHRbMTVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3dlZXBDb25maWdzID0gdFsxNl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5yb2JvdENvbmZpZ3MgPSB0WzE3XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmVnZ0NvbmZpZ3MgPSB0WzE4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmNoYW5jZUNvbmZpZyA9IHRbMTldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUud2Vla0NhcmRDb25maWdzID0gdFsyMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5lbmVteUNvbmZpZ3NNYXAuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBvID0gMDsgbyA8IGUuZW5lbXlDb25maWdzLmxlbmd0aDsgbysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gZS5lbmVteUNvbmZpZ3Nbb107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuZW5lbXlDb25maWdzTWFwLnNldChuLmlkLCBuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5za2lsbENvbmZpZ3NNYXAuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG8gPSAwOyBvIDwgZS5za2lsbENvbmZpZ3MubGVuZ3RoOyBvKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGUuc2tpbGxDb25maWdzW29dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnNraWxsQ29uZmlnc01hcC5zZXQobi5pZCwgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuYmFzaWNTa2lsbENvbmZpZ3Muc29ydChmdW5jdGlvbih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnNjb3JlIC0gZS5zY29yZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKG8gPSAwOyBvIDwgZS5iYXNpY1NraWxsQ29uZmlncy5sZW5ndGg7IG8rKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gZS5iYXNpY1NraWxsQ29uZmlnc1tvXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5iYXNpY1NraWxsQ29uZmlnTWFwLnNldChuLnNraWxsbWFzdGVyX2lkLCBuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zaG9wRGlhbW9uZENvbmZpZ3Muc29ydChmdW5jdGlvbih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnNvcnQgLSBlLnNvcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zaG9wUmVzQ29uZmlncy5zb3J0KGZ1bmN0aW9uKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc29ydCAtIGUuc29ydDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHQucHJvdG90eXBlLmxvYWRSZW1vdGUgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgdmFyIGkgPSB0aGlzO1xyXG4gICAgICAgIGkuaXNMb2FkZWRSZW1vdGUgPSAhMDtcclxuICAgICAgICBpLmFkU3dpdGNoQ29uZmlnID0ge1xyXG4gICAgICAgICAgICBcInR0X29wZW5fc2hvcF9kaWFtb25kXCI6IHRydWUsXHJcbiAgICAgICAgICAgIFwid3hfb3Blbl9zaG9wX2RpYW1vbmRcIjogdHJ1ZVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGkuZXhjaGFuZ2VDb25maWdzID0gW3tcclxuICAgICAgICAgICAgICAgIFwiaWRcIjogMSxcclxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk1HUTY2NlwiLFxyXG4gICAgICAgICAgICAgICAgXCJ0aXBzaW1nXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICA3XHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgXCJudW1cIjogW1xyXG4gICAgICAgICAgICAgICAgICAgIDJcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBcImNoYW5uZWxcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgOSxcclxuICAgICAgICAgICAgICAgICAgICA2XHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwiaWRcIjogMixcclxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk1HUTg4OFwiLFxyXG4gICAgICAgICAgICAgICAgXCJ0aXBzaW1nXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICA3XHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgXCJudW1cIjogW1xyXG4gICAgICAgICAgICAgICAgICAgIDNcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBcImNoYW5uZWxcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgOSxcclxuICAgICAgICAgICAgICAgICAgICA2XHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIFwiaWRcIjogMyxcclxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIk1HUTk5OVwiLFxyXG4gICAgICAgICAgICAgICAgXCJ0aXBzaW1nXCI6IFtcclxuICAgICAgICAgICAgICAgICAgICA3XHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgXCJudW1cIjogW1xyXG4gICAgICAgICAgICAgICAgICAgIDRcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBcImNoYW5uZWxcIjogW1xyXG4gICAgICAgICAgICAgICAgICAgIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgOSxcclxuICAgICAgICAgICAgICAgICAgICA2XHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgIGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgKHRoaXMuaXNTdGFydFJlbW90ZSkge1xyXG4gICAgICAgIC8vICAgICB2YXIgbyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIC8vICAgICB2YXIgbiA9IFtcclxuICAgICAgICAvLyAgICAgICAgIHRoaXMuYmFzZVVybCArIFwiL2FkX2NvbmZpZ1wiICsgJHN3aXRjaENvbnRleHQuU3dpdGNoQ29udGV4dC5jb25maWdJZCArIFwiLmpzb24/c2lnbj1cIiArIG8sXHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLmJhc2VVcmwgKyBcIi9SZWRlbXB0aW9uY29kZV9jb25maWdzXCIgKyAkc3dpdGNoQ29udGV4dC5Td2l0Y2hDb250ZXh0LmNvbmZpZ0lkICsgXCIuanNvbj9zaWduPVwiICsgb1xyXG4gICAgICAgIC8vICAgICBdO1xyXG4gICAgICAgIC8vICAgICB0LmxvYWROZXRSZXNBcnJheShuLCBudWxsKVxyXG4gICAgICAgIC8vICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICBpLmlzTG9hZGVkUmVtb3RlID0gITA7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgaS5hZFN3aXRjaENvbmZpZyA9IHRbMF07XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgaS5leGNoYW5nZUNvbmZpZ3MgPSB0WzFdO1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIGUoKTtcclxuICAgICAgICAvLyAgICAgICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgICAgICB9KVxyXG4gICAgICAgIC8vICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBlKCk7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAvLyAgICAgaWYgKGUpIHtcclxuICAgICAgICAvLyAgICAgICAgIGUoKTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH1cclxuICAgIH07XHJcbiAgICB0LnByb3RvdHlwZS5nZXRBZFN3aXRjaCA9IGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICByZXR1cm4gISghdGhpcy5hZFN3aXRjaENvbmZpZyB8fCAhdGhpcy5hZFN3aXRjaENvbmZpZ1t0XSkgJiYgdGhpcy5hZFN3aXRjaENvbmZpZ1t0XTtcclxuICAgIH07XHJcbiAgICB0LnByb3RvdHlwZS5nZXRBZFN3aXRjaDIgPSBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgdmFyIGkgPSBcIlwiO1xyXG4gICAgICAgICRwbGF0Zm9ybS5QbGF0Zm9ybS5jdXJyUGxhdEZvcm0gPT09ICRwbGF0Zm9ybS5QbGF0Zm9ybUVudW0uVE9VX1RJQU8gP1xyXG4gICAgICAgICAgICAoaSA9IFwidHRfXCIgKyBlKSA6XHJcbiAgICAgICAgICAgICRwbGF0Zm9ybS5QbGF0Zm9ybS5jdXJyUGxhdEZvcm0gPT09ICRwbGF0Zm9ybS5QbGF0Zm9ybUVudW0uV0VDSEFUICYmIChpID0gXCJ3eF9cIiArIGUpO1xyXG4gICAgICAgIHJldHVybiAhKFwiXCIgIT09IGkgJiYgIXQuaW5zdGFuY2UuZ2V0QWRTd2l0Y2goaSkpO1xyXG4gICAgfTtcclxuICAgIHQucHJvdG90eXBlLmdldEVuZW15Q29uZmlnID0gZnVuY3Rpb24odCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmVuZW15Q29uZmlncy5maW5kKGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGUuaWQgPT0gdDtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICB0LnByb3RvdHlwZS5sb2FkQ29uZmlnUmVzSnNvbiA9IGZ1bmN0aW9uKHQsIGUpIHtcclxuICAgICAgICB2YXIgaSA9ICRhc3NldHNNYXAuQnVuZGxlTmFtZXMuQ29uZmlncztcclxuICAgICAgICAkYXNzZXRzTG9hZGVyLmRlZmF1bHQuaW5zdGFuY2UubG9hZFJlcyhpLCB0LCBjYy5Kc29uQXNzZXQsIG51bGwsIGZ1bmN0aW9uKGksIG8pIHtcclxuICAgICAgICAgICAgaWYgKG8ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG4gPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgby5sZW5ndGg7IHMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIG4ucHVzaChvW3NdLmpzb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNjLmFzc2V0TWFuYWdlci5yZWxlYXNlQXNzZXQob1tzXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUobik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlICYmIGUobnVsbCk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImpzb27kuLrnqbo6XCIsIHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdC5wcm90b3R5cGUuZ2V0Q29uZmlnQnlMZXZlbCA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICB2YXIgaSA9IHRoaXM7XHJcbiAgICAgICAgaWYgKHRoaXMubGV2ZWxJbmZvQ29uZmlncy5sZW5ndGggPj0gZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlZWRMZXZlbCA9IGU7XHJcbiAgICAgICAgICAgIHJldHVybiB0Lmluc3RhbmNlLmxldmVsSW5mb0NvbmZpZ3MuZmluZChmdW5jdGlvbih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5pZCA9PT0gZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICRzZWVkVXRpbC5kZWZhdWx0LmluaXQoZSk7XHJcbiAgICAgICAgdGhpcy5zZWVkTGV2ZWwgPSAkc2VlZFV0aWwuZGVmYXVsdC5yYW5kb21Gcm9tU3luYygxLCB0aGlzLmxldmVsSW5mb0NvbmZpZ3MubGVuZ3RoKTtcclxuICAgICAgICB2YXIgbyA9IHQuaW5zdGFuY2UubGV2ZWxJbmZvQ29uZmlncy5maW5kKGZ1bmN0aW9uKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQuaWQgPT09IGkuc2VlZExldmVsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBuID0gW107XHJcbiAgICAgICAgdmFyIHMgPSBbXTtcclxuICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IG8uYWRkSFAubGVuZ3RoOyByKyspIHtcclxuICAgICAgICAgICAgdmFyIGEgPSB0aGlzLmVuZW15Q29uZmlnc01hcC5nZXQoby5Nb25zdGVyc3Bvb2xbcl0pO1xyXG4gICAgICAgICAgICBuLnB1c2goZSAqIGEuYWRkX2hwKTtcclxuICAgICAgICAgICAgcy5wdXNoKGUgKiBhLmFkZF9hdGspO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpZDogZSxcclxuICAgICAgICAgICAgTW9uc3RlcnNwb29sOiBvLk1vbnN0ZXJzcG9vbCxcclxuICAgICAgICAgICAgYWRkSFA6IG4sXHJcbiAgICAgICAgICAgIGFkZGF0azogcyxcclxuICAgICAgICAgICAgRVg6IG8uRVgsXHJcbiAgICAgICAgICAgIEVYX251bTogby5FWF9udW0sXHJcbiAgICAgICAgICAgIEVYX2NvZWZmaWNpZW50OiBvLkVYX2NvZWZmaWNpZW50LFxyXG4gICAgICAgICAgICByZXdhcmR0eXBlOiBvLnJld2FyZHR5cGUsXHJcbiAgICAgICAgICAgIHJld2FyZF9udW06IG8ucmV3YXJkX251bSxcclxuICAgICAgICAgICAgZ2Vtc3RvbmVfd2VpZ2h0OiBvLmdlbXN0b25lX3dlaWdodCxcclxuICAgICAgICAgICAgVHJlYXN1cmVDaGVzdHR5cGU6IG8uVHJlYXN1cmVDaGVzdHR5cGUsXHJcbiAgICAgICAgICAgIFRyZWFzdXJlQ2hlc3RfbnVtOiBvLlRyZWFzdXJlQ2hlc3RfbnVtLFxyXG4gICAgICAgICAgICBwaGFzZV9yZXdhcmRfdGltZTogby5waGFzZV9yZXdhcmRfdGltZSxcclxuICAgICAgICAgICAgcGhhc2VfcmV3YXJkX251bTogby5waGFzZV9yZXdhcmRfbnVtXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcbiAgICB0LnByb3RvdHlwZS5nZXRTd2VlcENvbmZpZyA9IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICBpZiAodGhpcy5sZXZlbEluZm9Db25maWdzLmxlbmd0aCA+PSBlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VlZExldmVsID0gZTtcclxuICAgICAgICAgICAgcmV0dXJuIHQuaW5zdGFuY2Uuc3dlZXBDb25maWdzLmZpbmQoZnVuY3Rpb24odCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuaWQgPT09IGU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAkc2VlZFV0aWwuZGVmYXVsdC5pbml0KGUpO1xyXG4gICAgICAgIHRoaXMuc2VlZExldmVsID0gJHNlZWRVdGlsLmRlZmF1bHQucmFuZG9tRnJvbVN5bmMoMSwgdGhpcy5sZXZlbEluZm9Db25maWdzLmxlbmd0aCk7XHJcbiAgICAgICAgdmFyIGkgPSBlIC0gdGhpcy5sZXZlbEluZm9Db25maWdzLmxlbmd0aDtcclxuICAgICAgICB2YXIgbyA9IHRoaXMuc3dlZXBDb25maWdzW3RoaXMuc3dlZXBDb25maWdzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIHZhciBuID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCBvLnJld2FyZG51bS5sZW5ndGg7IHMrKykge1xyXG4gICAgICAgICAgICBuLnB1c2goby5yZXdhcmRudW1bc10gKyBpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaWQ6IGUsXHJcbiAgICAgICAgICAgIHJld2FyZG51bTogblxyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdC5sb2FkTmV0UmVzQXJyYXkgPSBmdW5jdGlvbih0LCBlKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgaTtcclxuICAgICAgICAgICAgdmFyIG87XHJcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGkgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAobyA9IDA7IG8gPCB0Lmxlbmd0aDsgbysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB0W29dXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgIDIsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFByb21pc2UoZnVuY3Rpb24odCwgbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYy5hc3NldE1hbmFnZXIubG9hZEFueShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih0LCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSh0LCBpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPyBvKGUpIDogdChpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdC5pbnN0YW5jZSA9IG5ldyB0KCk7XHJcbiAgICByZXR1cm4gdDtcclxufSkoKTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gdTsiXX0=