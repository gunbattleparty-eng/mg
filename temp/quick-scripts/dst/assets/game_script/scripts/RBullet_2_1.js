
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/game_script/scripts/RBullet_2_1.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '0dec50kIZNGqpZOPqnKPQxV', 'RBullet_2_1');
// game_script/scripts/RBullet_2_1.js

"use strict";

var o;

var $object = require("./Object");

var $util = require("./Util");

var $gameContext = require("./GameContext");

var $baseBullet = require("./BaseBullet");

var u = cc._decorator;
var d = u.ccclass;
var p = (u.property, function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    e.buttleType = $baseBullet.BulletType.r_bullet_2;
    e.atkAnim = null;
    e.bulletSpeed = 800;
    e.time = 0;
    e.targetNode = null;
    e.targetPos = null;
    e.initPos = null;
    e.status = 0;
    e.dir = null;
    return e;
  }

  __extends(e, t);

  e.prototype.initRBullet = function (e, i, o, n, s) {
    var r = this;
    this.initPos = this.node.position.clone();
    this.targetNode = e;
    this.targetPos = this.targetNode.getPosition().clone();
    this.time = s;
    t.prototype.initButtle.call(this, null, null);
    this.bulletSpeed = n;
    this.atkAnim = this.node.getComponentInChildren(cc.Animation);
    this.atk = i;
    this.setScale(cc.v3(o, o));
    this.status = 0;
    var a = this.node.position.sub(cc.v3(this.targetPos.x, -410)).mag() / this.bulletSpeed;
    cc.tween(this.node).to(a, {
      position: cc.v3(this.targetPos.x, -410)
    }).call(function () {
      r.status = 2;
    }).start();
  };

  e.prototype.onTrigger = function (t, e) {
    if (!this.isUse) {
      if (e == $object.Trigger.enter) {
        t.object.sufferAtk({
          skillSpecialitys: [],
          atk: this.atk
        });
      }
    }
  };

  e.prototype.updateFrame = function (e) {
    var i = this;
    t.prototype.updateFrame.call(this, e);

    if (this.time > 0) {
      this.time -= e;

      if (this.time <= 0 && 2 === this.status) {
        this.status = 4;
      }
    }

    if (2 === this.status) {
      if (!(this.targetNode && $util["default"].isValid(this.targetNode.node) || (this.targetNode = $gameContext["default"].ins.getRangeRandomEnemyLayerByPos(this.targetPos, 900), this.targetNode))) {
        return void (this.status = 4);
      }

      this.targetPos.x = this.targetNode.node.x;
      this.targetPos.y = this.targetNode.node.y;

      if (0 === this.speed) {
        this.speed = this.bulletSpeed;
      }

      this.dir = this.targetPos.sub(this.getPosition());
      this.dir.magSqr() <= 2500 ? (this.velocity = cc.Vec3.ZERO, this.status = 3, this.trigger = !0, this.atkAnim.node.active = !0, this.atkAnim.play("rbullet_2"), this.atkAnim.once(cc.Animation.EventType.FINISHED, function () {
        i.atkAnim.node.active = !1;
        i.trigger = !1;
        i.dir = i.initPos.sub(i.getPosition()).normalize();
        i.velocity.set(i.dir.normalize()).multiplyScalar(i.speed);
        i.status = 4;
      }, this)) : this.velocity.set(this.dir.normalize()).multiplyScalar(this.speed);
    }

    if (4 === this.status && this.initPos.sub(this.getPosition()).magSqr() <= 2500) {
      this.status = 5;
      this.removeSelf();
    }
  };

  return __decorate([d], e);
}($baseBullet["default"]));
exports["default"] = p;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcZ2FtZV9zY3JpcHRcXHNjcmlwdHNcXFJCdWxsZXRfMl8xLmpzIl0sIm5hbWVzIjpbIm8iLCIkb2JqZWN0IiwicmVxdWlyZSIsIiR1dGlsIiwiJGdhbWVDb250ZXh0IiwiJGJhc2VCdWxsZXQiLCJ1IiwiY2MiLCJfZGVjb3JhdG9yIiwiZCIsImNjY2xhc3MiLCJwIiwicHJvcGVydHkiLCJ0IiwiZSIsImFwcGx5IiwiYXJndW1lbnRzIiwiYnV0dGxlVHlwZSIsIkJ1bGxldFR5cGUiLCJyX2J1bGxldF8yIiwiYXRrQW5pbSIsImJ1bGxldFNwZWVkIiwidGltZSIsInRhcmdldE5vZGUiLCJ0YXJnZXRQb3MiLCJpbml0UG9zIiwic3RhdHVzIiwiZGlyIiwiX19leHRlbmRzIiwicHJvdG90eXBlIiwiaW5pdFJCdWxsZXQiLCJpIiwibiIsInMiLCJyIiwibm9kZSIsInBvc2l0aW9uIiwiY2xvbmUiLCJnZXRQb3NpdGlvbiIsImluaXRCdXR0bGUiLCJjYWxsIiwiZ2V0Q29tcG9uZW50SW5DaGlsZHJlbiIsIkFuaW1hdGlvbiIsImF0ayIsInNldFNjYWxlIiwidjMiLCJhIiwic3ViIiwieCIsIm1hZyIsInR3ZWVuIiwidG8iLCJzdGFydCIsIm9uVHJpZ2dlciIsImlzVXNlIiwiVHJpZ2dlciIsImVudGVyIiwib2JqZWN0Iiwic3VmZmVyQXRrIiwic2tpbGxTcGVjaWFsaXR5cyIsInVwZGF0ZUZyYW1lIiwiaXNWYWxpZCIsImlucyIsImdldFJhbmdlUmFuZG9tRW5lbXlMYXllckJ5UG9zIiwieSIsInNwZWVkIiwibWFnU3FyIiwidmVsb2NpdHkiLCJWZWMzIiwiWkVSTyIsInRyaWdnZXIiLCJhY3RpdmUiLCJwbGF5Iiwib25jZSIsIkV2ZW50VHlwZSIsIkZJTklTSEVEIiwibm9ybWFsaXplIiwic2V0IiwibXVsdGlwbHlTY2FsYXIiLCJyZW1vdmVTZWxmIiwiX19kZWNvcmF0ZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FB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K0JzQyxTQUEvQixFQUFSO1FBQ0E3QyxDQUFDLENBQUNvQyxRQUFGLENBQVdVLEdBQVgsQ0FBZTlDLENBQUMsQ0FBQ0osR0FBRixDQUFNaUQsU0FBTixFQUFmLEVBQWtDRSxjQUFsQyxDQUFpRC9DLENBQUMsQ0FBQ2tDLEtBQW5EO1FBQ0FsQyxDQUFDLENBQUNMLE1BQUYsR0FBVyxDQUFYO01BQ0gsQ0FSTCxFQVNJLElBVEosQ0FOTixJQWlCTSxLQUFLeUMsUUFBTCxDQUFjVSxHQUFkLENBQWtCLEtBQUtsRCxHQUFMLENBQVNpRCxTQUFULEVBQWxCLEVBQXdDRSxjQUF4QyxDQUF1RCxLQUFLYixLQUE1RCxDQWpCTjtJQWtCSDs7SUFDRCxJQUFJLE1BQU0sS0FBS3ZDLE1BQVgsSUFBcUIsS0FBS0QsT0FBTCxDQUFhc0IsR0FBYixDQUFpQixLQUFLVCxXQUFMLEVBQWpCLEVBQXFDNEIsTUFBckMsTUFBaUQsSUFBMUUsRUFBZ0Y7TUFDNUUsS0FBS3hDLE1BQUwsR0FBYyxDQUFkO01BQ0EsS0FBS3FELFVBQUw7SUFDSDtFQUNKLENBbkREOztFQW9EQSxPQUFPQyxVQUFVLENBQUMsQ0FBQ3ZFLENBQUQsQ0FBRCxFQUFNSyxDQUFOLENBQWpCO0FBQ0gsQ0FwR0QsQ0FvR0dULFdBQVcsV0FwR2QsQ0FGQyxDQUFMO0FBdUdBNEUsT0FBTyxXQUFQLEdBQWtCdEUsQ0FBbEIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbInZhciBvO1xyXG52YXIgJG9iamVjdCA9IHJlcXVpcmUoXCIuL09iamVjdFwiKTtcclxudmFyICR1dGlsID0gcmVxdWlyZShcIi4vVXRpbFwiKTtcclxudmFyICRnYW1lQ29udGV4dCA9IHJlcXVpcmUoXCIuL0dhbWVDb250ZXh0XCIpO1xyXG52YXIgJGJhc2VCdWxsZXQgPSByZXF1aXJlKFwiLi9CYXNlQnVsbGV0XCIpO1xyXG52YXIgdSA9IGNjLl9kZWNvcmF0b3I7XHJcbnZhciBkID0gdS5jY2NsYXNzO1xyXG52YXIgcCA9XHJcbiAgICAodS5wcm9wZXJ0eSxcclxuICAgIChmdW5jdGlvbiAodCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGUoKSB7XHJcbiAgICAgICAgICAgIHZhciBlID0gKG51bGwgIT09IHQgJiYgdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSB8fCB0aGlzO1xyXG4gICAgICAgICAgICBlLmJ1dHRsZVR5cGUgPSAkYmFzZUJ1bGxldC5CdWxsZXRUeXBlLnJfYnVsbGV0XzI7XHJcbiAgICAgICAgICAgIGUuYXRrQW5pbSA9IG51bGw7XHJcbiAgICAgICAgICAgIGUuYnVsbGV0U3BlZWQgPSA4MDA7XHJcbiAgICAgICAgICAgIGUudGltZSA9IDA7XHJcbiAgICAgICAgICAgIGUudGFyZ2V0Tm9kZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGUudGFyZ2V0UG9zID0gbnVsbDtcclxuICAgICAgICAgICAgZS5pbml0UG9zID0gbnVsbDtcclxuICAgICAgICAgICAgZS5zdGF0dXMgPSAwO1xyXG4gICAgICAgICAgICBlLmRpciA9IG51bGw7XHJcbiAgICAgICAgICAgIHJldHVybiBlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfX2V4dGVuZHMoZSwgdCk7XHJcbiAgICAgICAgZS5wcm90b3R5cGUuaW5pdFJCdWxsZXQgPSBmdW5jdGlvbiAoZSwgaSwgbywgbiwgcykge1xyXG4gICAgICAgICAgICB2YXIgciA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdFBvcyA9IHRoaXMubm9kZS5wb3NpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldE5vZGUgPSBlO1xyXG4gICAgICAgICAgICB0aGlzLnRhcmdldFBvcyA9IHRoaXMudGFyZ2V0Tm9kZS5nZXRQb3NpdGlvbigpLmNsb25lKCk7XHJcbiAgICAgICAgICAgIHRoaXMudGltZSA9IHM7XHJcbiAgICAgICAgICAgIHQucHJvdG90eXBlLmluaXRCdXR0bGUuY2FsbCh0aGlzLCBudWxsLCBudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5idWxsZXRTcGVlZCA9IG47XHJcbiAgICAgICAgICAgIHRoaXMuYXRrQW5pbSA9IHRoaXMubm9kZS5nZXRDb21wb25lbnRJbkNoaWxkcmVuKGNjLkFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuYXRrID0gaTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTY2FsZShjYy52MyhvLCBvKSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gMDtcclxuICAgICAgICAgICAgdmFyIGEgPSB0aGlzLm5vZGUucG9zaXRpb24uc3ViKGNjLnYzKHRoaXMudGFyZ2V0UG9zLngsIC00MTApKS5tYWcoKSAvIHRoaXMuYnVsbGV0U3BlZWQ7XHJcbiAgICAgICAgICAgIGNjLnR3ZWVuKHRoaXMubm9kZSlcclxuICAgICAgICAgICAgICAgIC50byhhLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IGNjLnYzKHRoaXMudGFyZ2V0UG9zLngsIC00MTApXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhbGwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHIuc3RhdHVzID0gMjtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuc3RhcnQoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGUucHJvdG90eXBlLm9uVHJpZ2dlciA9IGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1VzZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUgPT0gJG9iamVjdC5UcmlnZ2VyLmVudGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5vYmplY3Quc3VmZmVyQXRrKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpbGxTcGVjaWFsaXR5czogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0azogdGhpcy5hdGtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZS5wcm90b3R5cGUudXBkYXRlRnJhbWUgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgaSA9IHRoaXM7XHJcbiAgICAgICAgICAgIHQucHJvdG90eXBlLnVwZGF0ZUZyYW1lLmNhbGwodGhpcywgZSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbWUgLT0gZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRpbWUgPD0gMCAmJiAyID09PSB0aGlzLnN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gNDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoMiA9PT0gdGhpcy5zdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAhKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy50YXJnZXROb2RlICYmICR1dGlsLmRlZmF1bHQuaXNWYWxpZCh0aGlzLnRhcmdldE5vZGUubm9kZSkpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICgodGhpcy50YXJnZXROb2RlID0gJGdhbWVDb250ZXh0LmRlZmF1bHQuaW5zLmdldFJhbmdlUmFuZG9tRW5lbXlMYXllckJ5UG9zKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXJnZXRQb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA5MDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0Tm9kZSlcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAodGhpcy5zdGF0dXMgPSA0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0UG9zLnggPSB0aGlzLnRhcmdldE5vZGUubm9kZS54O1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRQb3MueSA9IHRoaXMudGFyZ2V0Tm9kZS5ub2RlLnk7XHJcbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gdGhpcy5zcGVlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3BlZWQgPSB0aGlzLmJ1bGxldFNwZWVkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXIgPSB0aGlzLnRhcmdldFBvcy5zdWIodGhpcy5nZXRQb3NpdGlvbigpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlyLm1hZ1NxcigpIDw9IDI1MDBcclxuICAgICAgICAgICAgICAgICAgICA/ICgodGhpcy52ZWxvY2l0eSA9IGNjLlZlYzMuWkVSTyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAodGhpcy5zdGF0dXMgPSAzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnRyaWdnZXIgPSAhMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAodGhpcy5hdGtBbmltLm5vZGUuYWN0aXZlID0gITApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5hdGtBbmltLnBsYXkoXCJyYnVsbGV0XzJcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF0a0FuaW0ub25jZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICBjYy5BbmltYXRpb24uRXZlbnRUeXBlLkZJTklTSEVELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5hdGtBbmltLm5vZGUuYWN0aXZlID0gITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkudHJpZ2dlciA9ICExO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmRpciA9IGkuaW5pdFBvcy5zdWIoaS5nZXRQb3NpdGlvbigpKS5ub3JtYWxpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS52ZWxvY2l0eS5zZXQoaS5kaXIubm9ybWFsaXplKCkpLm11bHRpcGx5U2NhbGFyKGkuc3BlZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnN0YXR1cyA9IDQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzXHJcbiAgICAgICAgICAgICAgICAgICAgICApKVxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy52ZWxvY2l0eS5zZXQodGhpcy5kaXIubm9ybWFsaXplKCkpLm11bHRpcGx5U2NhbGFyKHRoaXMuc3BlZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICg0ID09PSB0aGlzLnN0YXR1cyAmJiB0aGlzLmluaXRQb3Muc3ViKHRoaXMuZ2V0UG9zaXRpb24oKSkubWFnU3FyKCkgPD0gMjUwMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSA1O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTZWxmKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBfX2RlY29yYXRlKFtkXSwgZSk7XHJcbiAgICB9KSgkYmFzZUJ1bGxldC5kZWZhdWx0KSk7XHJcbmV4cG9ydHMuZGVmYXVsdCA9IHA7XHJcbiJdfQ==