
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/game_script/scripts/NewPackView.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '461ecyf/ulPJpAxs6+0I6QH', 'NewPackView');
// game_script/scripts/NewPackView.js

"use strict";

var o;

var $assetsMap = require("./AssetsMap");

var $eventManager = require("./EventManager");

var $popupManager = require("./PopupManager");

var $popupView = require("./PopupView");

var $platform = require("./Platform");

var $seedUtil = require("./SeedUtil");

var $aD = require("./AD");

var $adService = require("./AdService");

var $configContext = require("./ConfigContext");

var $localEventName = require("./LocalEventName");

var $roleContext = require("./RoleContext");

var $userDataContext = require("./UserDataContext");

var $startView = require("./StartView");

var k = cc._decorator;
var v = k.ccclass;
var b = k.property;

var w = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    e.btnAd = null;
    e.signContent = null;
    e.countLayer = null;
    return e;
  }

  __extends(e, t);

  e.prototype.onResetView = function () {
    this.btnAd.active = !$userDataContext["default"].Ins.isSign();

    for (var t = 1; t <= 3; t++) {
      this.signContent.children[t - 1].active = $userDataContext["default"].Ins.sign.day >= t;
    }

    for (t = 0; t < $configContext["default"].instance.signConfigs.length; t++) {
      var e = $configContext["default"].instance.signConfigs[t];
      var i = this.countLayer.children[t];

      for (var o = 0; o < e.num.length; o++) {
        i.children[o].getComponent(cc.Label).string = e.num[o].toString();
      }
    }
  };

  e.prototype.addEvent = function () {
    this.btnAd.on("click", this.clickAd, this);
  };

  e.prototype.removeEvent = function () {
    this.btnAd.off("click", this.clickAd, this);
  };

  e.prototype.clickAd = function () {
    var t = this;
    $adService["default"].Ins.showRewardedVideo(function () {
      if ($platform.Platform.currPlatForm === $platform.PlatformEnum.TOU_TIAO) {
        $aD["default"].toutiao.report("New_gift");
      }

      t.caculetReward();
      t.onResetView();
      $eventManager["default"].send($localEventName["default"].RENDER_DOT, $startView.MenuType.Battle);
    });
  };

  e.prototype.caculetReward = function () {
    var t = $configContext["default"].instance.signConfigs.find(function (t) {
      return t.id === $userDataContext["default"].Ins.sign.day + 1;
    });
    var e = [];

    for (var i = 0; i < t.rewardtpye.length; i++) {
      var o = t.rewardtpye[i];

      if (1 === o) {
        var n = $roleContext["default"].ins.getGunSkinInfo(2);
        n.shard += 1;
        $roleContext["default"].ins.setGunSkinInfo(n);
        e.push({
          type: 10,
          ext: 2,
          num: 1
        });
      } else {
        if (2 === o) {
          var s = $configContext["default"].instance.gemConfigs.filter(function (t) {
            return 4 === t.Grade;
          });
          var a = s[$seedUtil["default"].randomFrom(0, s.length - 1)];
          $roleContext["default"].ins.addPackItem(a, 1);
          e.push({
            type: 5,
            ext: a.id,
            num: 1
          });
        } else {
          3 === o ? ($userDataContext["default"].Ins.opearCoin(t.num[i]), e.push({
            type: 1,
            num: t.num[i]
          })) : 4 === o && ($userDataContext["default"].Ins.opearDiamond(t.num[i]), e.push({
            type: 6,
            num: t.num[i]
          }));
        }
      }
    }

    $popupManager.PopupManager.instance.open($assetsMap.AssetsMap.PopUpBundles.prefabs.assetsList.RewardView, {
      infos: e
    });
    $userDataContext["default"].Ins.signRecord();
  };

  __decorate([b(cc.Node)], e.prototype, "btnAd", void 0);

  __decorate([b(cc.Node)], e.prototype, "signContent", void 0);

  __decorate([b(cc.Node)], e.prototype, "countLayer", void 0);

  return __decorate([v], e);
}($popupView.PopupView);

exports["default"] = w;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcZ2FtZV9zY3JpcHRcXHNjcmlwdHNcXE5ld1BhY2tWaWV3LmpzIl0sIm5hbWVzIjpbIm8iLCIkYXNzZXRzTWFwIiwicmVxdWlyZSIsIiRldmVudE1hbmFnZXIiLCIkcG9wdXBNYW5hZ2VyIiwiJHBvcHVwVmlldyIsIiRwbGF0Zm9ybSIsIiRzZWVkVXRpbCIsIiRhRCIsIiRhZFNlcnZpY2UiLCIkY29uZmlnQ29udGV4dCIsIiRsb2NhbEV2ZW50TmFtZSIsIiRyb2xlQ29udGV4dCIsIiR1c2VyRGF0YUNvbnRleHQiLCIkc3RhcnRWaWV3IiwiayIsImNjIiwiX2RlY29yYXRvciIsInYiLCJjY2NsYXNzIiwiYiIsInByb3BlcnR5IiwidyIsInQiLCJlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJidG5BZCIsInNpZ25Db250ZW50IiwiY291bnRMYXllciIsIl9fZXh0ZW5kcyIsInByb3RvdHlwZSIsIm9uUmVzZXRWaWV3IiwiYWN0aXZlIiwiSW5zIiwiaXNTaWduIiwiY2hpbGRyZW4iLCJzaWduIiwiZGF5IiwiaW5zdGFuY2UiLCJzaWduQ29uZmlncyIsImxlbmd0aCIsImkiLCJudW0iLCJnZXRDb21wb25lbnQiLCJMYWJlbCIsInN0cmluZyIsInRvU3RyaW5nIiwiYWRkRXZlbnQiLCJvbiIsImNsaWNrQWQiLCJyZW1vdmVFdmVudCIsIm9mZiIsInNob3dSZXdhcmRlZFZpZGVvIiwiUGxhdGZvcm0iLCJjdXJyUGxhdEZvcm0iLCJQbGF0Zm9ybUVudW0iLCJUT1VfVElBTyIsInRvdXRpYW8iLCJyZXBvcnQiLCJjYWN1bGV0UmV3YXJkIiwic2VuZCIsIlJFTkRFUl9ET1QiLCJNZW51VHlwZSIsIkJhdHRsZSIsImZpbmQiLCJpZCIsInJld2FyZHRweWUiLCJuIiwiaW5zIiwiZ2V0R3VuU2tpbkluZm8iLCJzaGFyZCIsInNldEd1blNraW5JbmZvIiwicHVzaCIsInR5cGUiLCJleHQiLCJzIiwiZ2VtQ29uZmlncyIsImZpbHRlciIsIkdyYWRlIiwiYSIsInJhbmRvbUZyb20iLCJhZGRQYWNrSXRlbSIsIm9wZWFyQ29pbiIsIm9wZWFyRGlhbW9uZCIsIlBvcHVwTWFuYWdlciIsIm9wZW4iLCJBc3NldHNNYXAiLCJQb3BVcEJ1bmRsZXMiLCJwcmVmYWJzIiwiYXNzZXRzTGlzdCIsIlJld2FyZFZpZXciLCJpbmZvcyIsInNpZ25SZWNvcmQiLCJfX2RlY29yYXRlIiwiTm9kZSIsIlBvcHVwVmlldyIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsQ0FBSjs7QUFDQSxJQUFJQyxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxhQUFELENBQXhCOztBQUNBLElBQUlDLGFBQWEsR0FBR0QsT0FBTyxDQUFDLGdCQUFELENBQTNCOztBQUNBLElBQUlFLGFBQWEsR0FBR0YsT0FBTyxDQUFDLGdCQUFELENBQTNCOztBQUNBLElBQUlHLFVBQVUsR0FBR0gsT0FBTyxDQUFDLGFBQUQsQ0FBeEI7O0FBQ0EsSUFBSUksU0FBUyxHQUFHSixPQUFPLENBQUMsWUFBRCxDQUF2Qjs7QUFDQSxJQUFJSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxZQUFELENBQXZCOztBQUNBLElBQUlNLEdBQUcsR0FBR04sT0FBTyxDQUFDLE1BQUQsQ0FBakI7O0FBQ0EsSUFBSU8sVUFBVSxHQUFHUCxPQUFPLENBQUMsYUFBRCxDQUF4Qjs7QUFDQSxJQUFJUSxjQUFjLEdBQUdSLE9BQU8sQ0FBQyxpQkFBRCxDQUE1Qjs7QUFDQSxJQUFJUyxlQUFlLEdBQUdULE9BQU8sQ0FBQyxrQkFBRCxDQUE3Qjs7QUFDQSxJQUFJVSxZQUFZLEdBQUdWLE9BQU8sQ0FBQyxlQUFELENBQTFCOztBQUNBLElBQUlXLGdCQUFnQixHQUFHWCxPQUFPLENBQUMsbUJBQUQsQ0FBOUI7O0FBQ0EsSUFBSVksVUFBVSxHQUFHWixPQUFPLENBQUMsYUFBRCxDQUF4Qjs7QUFDQSxJQUFJYSxDQUFDLEdBQUdDLEVBQUUsQ0FBQ0MsVUFBWDtBQUNBLElBQUlDLENBQUMsR0FBR0gsQ0FBQyxDQUFDSSxPQUFW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VUFGRixDQUFQLENBRkEsQ0FOTjtRQVlIO01BQ0o7SUFDSjs7SUFDRHRDLGFBQWEsQ0FBQ2lGLFlBQWQsQ0FBMkI5QyxRQUEzQixDQUFvQytDLElBQXBDLENBQXlDckYsVUFBVSxDQUFDc0YsU0FBWCxDQUFxQkMsWUFBckIsQ0FBa0NDLE9BQWxDLENBQTBDQyxVQUExQyxDQUFxREMsVUFBOUYsRUFBMEc7TUFDdEdDLEtBQUssRUFBRXBFO0lBRCtGLENBQTFHO0lBR0FYLGdCQUFnQixXQUFoQixDQUF5QnFCLEdBQXpCLENBQTZCMkQsVUFBN0I7RUFDSCxDQWhERDs7RUFpREFDLFVBQVUsQ0FBQyxDQUFDMUUsQ0FBQyxDQUFDSixFQUFFLENBQUMrRSxJQUFKLENBQUYsQ0FBRCxFQUFldkUsQ0FBQyxDQUFDTyxTQUFqQixFQUE0QixPQUE1QixFQUFxQyxLQUFLLENBQTFDLENBQVY7O0VBQ0ErRCxVQUFVLENBQUMsQ0FBQzFFLENBQUMsQ0FBQ0osRUFBRSxDQUFDK0UsSUFBSixDQUFGLENBQUQsRUFBZXZFLENBQUMsQ0FBQ08sU0FBakIsRUFBNEIsYUFBNUIsRUFBMkMsS0FBSyxDQUFoRCxDQUFWOztFQUNBK0QsVUFBVSxDQUFDLENBQUMxRSxDQUFDLENBQUNKLEVBQUUsQ0FBQytFLElBQUosQ0FBRixDQUFELEVBQWV2RSxDQUFDLENBQUNPLFNBQWpCLEVBQTRCLFlBQTVCLEVBQTBDLEtBQUssQ0FBL0MsQ0FBVjs7RUFDQSxPQUFPK0QsVUFBVSxDQUFDLENBQUM1RSxDQUFELENBQUQsRUFBTU0sQ0FBTixDQUFqQjtBQUNILENBNUZPLENBNEZMbkIsVUFBVSxDQUFDMkYsU0E1Rk4sQ0FBUjs7QUE2RkFDLE9BQU8sV0FBUCxHQUFrQjNFLENBQWxCIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgbztcclxudmFyICRhc3NldHNNYXAgPSByZXF1aXJlKFwiLi9Bc3NldHNNYXBcIik7XHJcbnZhciAkZXZlbnRNYW5hZ2VyID0gcmVxdWlyZShcIi4vRXZlbnRNYW5hZ2VyXCIpO1xyXG52YXIgJHBvcHVwTWFuYWdlciA9IHJlcXVpcmUoXCIuL1BvcHVwTWFuYWdlclwiKTtcclxudmFyICRwb3B1cFZpZXcgPSByZXF1aXJlKFwiLi9Qb3B1cFZpZXdcIik7XHJcbnZhciAkcGxhdGZvcm0gPSByZXF1aXJlKFwiLi9QbGF0Zm9ybVwiKTtcclxudmFyICRzZWVkVXRpbCA9IHJlcXVpcmUoXCIuL1NlZWRVdGlsXCIpO1xyXG52YXIgJGFEID0gcmVxdWlyZShcIi4vQURcIik7XHJcbnZhciAkYWRTZXJ2aWNlID0gcmVxdWlyZShcIi4vQWRTZXJ2aWNlXCIpO1xyXG52YXIgJGNvbmZpZ0NvbnRleHQgPSByZXF1aXJlKFwiLi9Db25maWdDb250ZXh0XCIpO1xyXG52YXIgJGxvY2FsRXZlbnROYW1lID0gcmVxdWlyZShcIi4vTG9jYWxFdmVudE5hbWVcIik7XHJcbnZhciAkcm9sZUNvbnRleHQgPSByZXF1aXJlKFwiLi9Sb2xlQ29udGV4dFwiKTtcclxudmFyICR1c2VyRGF0YUNvbnRleHQgPSByZXF1aXJlKFwiLi9Vc2VyRGF0YUNvbnRleHRcIik7XHJcbnZhciAkc3RhcnRWaWV3ID0gcmVxdWlyZShcIi4vU3RhcnRWaWV3XCIpO1xyXG52YXIgayA9IGNjLl9kZWNvcmF0b3I7XHJcbnZhciB2ID0gay5jY2NsYXNzO1xyXG52YXIgYiA9IGsucHJvcGVydHk7XHJcbnZhciB3ID0gKGZ1bmN0aW9uICh0KSB7XHJcbiAgICBmdW5jdGlvbiBlKCkge1xyXG4gICAgICAgIHZhciBlID0gKG51bGwgIT09IHQgJiYgdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSB8fCB0aGlzO1xyXG4gICAgICAgIGUuYnRuQWQgPSBudWxsO1xyXG4gICAgICAgIGUuc2lnbkNvbnRlbnQgPSBudWxsO1xyXG4gICAgICAgIGUuY291bnRMYXllciA9IG51bGw7XHJcbiAgICAgICAgcmV0dXJuIGU7XHJcbiAgICB9XHJcbiAgICBfX2V4dGVuZHMoZSwgdCk7XHJcbiAgICBlLnByb3RvdHlwZS5vblJlc2V0VmlldyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmJ0bkFkLmFjdGl2ZSA9ICEkdXNlckRhdGFDb250ZXh0LmRlZmF1bHQuSW5zLmlzU2lnbigpO1xyXG4gICAgICAgIGZvciAodmFyIHQgPSAxOyB0IDw9IDM7IHQrKykge1xyXG4gICAgICAgICAgICB0aGlzLnNpZ25Db250ZW50LmNoaWxkcmVuW3QgLSAxXS5hY3RpdmUgPSAkdXNlckRhdGFDb250ZXh0LmRlZmF1bHQuSW5zLnNpZ24uZGF5ID49IHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodCA9IDA7IHQgPCAkY29uZmlnQ29udGV4dC5kZWZhdWx0Lmluc3RhbmNlLnNpZ25Db25maWdzLmxlbmd0aDsgdCsrKSB7XHJcbiAgICAgICAgICAgIHZhciBlID0gJGNvbmZpZ0NvbnRleHQuZGVmYXVsdC5pbnN0YW5jZS5zaWduQ29uZmlnc1t0XTtcclxuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLmNvdW50TGF5ZXIuY2hpbGRyZW5bdF07XHJcbiAgICAgICAgICAgIGZvciAodmFyIG8gPSAwOyBvIDwgZS5udW0ubGVuZ3RoOyBvKyspIHtcclxuICAgICAgICAgICAgICAgIGkuY2hpbGRyZW5bb10uZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSBlLm51bVtvXS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGUucHJvdG90eXBlLmFkZEV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuYnRuQWQub24oXCJjbGlja1wiLCB0aGlzLmNsaWNrQWQsIHRoaXMpO1xyXG4gICAgfTtcclxuICAgIGUucHJvdG90eXBlLnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuYnRuQWQub2ZmKFwiY2xpY2tcIiwgdGhpcy5jbGlja0FkLCB0aGlzKTtcclxuICAgIH07XHJcbiAgICBlLnByb3RvdHlwZS5jbGlja0FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0ID0gdGhpcztcclxuICAgICAgICAkYWRTZXJ2aWNlLmRlZmF1bHQuSW5zLnNob3dSZXdhcmRlZFZpZGVvKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCRwbGF0Zm9ybS5QbGF0Zm9ybS5jdXJyUGxhdEZvcm0gPT09ICRwbGF0Zm9ybS5QbGF0Zm9ybUVudW0uVE9VX1RJQU8pIHtcclxuICAgICAgICAgICAgICAgICRhRC5kZWZhdWx0LnRvdXRpYW8ucmVwb3J0KFwiTmV3X2dpZnRcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdC5jYWN1bGV0UmV3YXJkKCk7XHJcbiAgICAgICAgICAgIHQub25SZXNldFZpZXcoKTtcclxuICAgICAgICAgICAgJGV2ZW50TWFuYWdlci5kZWZhdWx0LnNlbmQoJGxvY2FsRXZlbnROYW1lLmRlZmF1bHQuUkVOREVSX0RPVCwgJHN0YXJ0Vmlldy5NZW51VHlwZS5CYXR0bGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIGUucHJvdG90eXBlLmNhY3VsZXRSZXdhcmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHQgPSAkY29uZmlnQ29udGV4dC5kZWZhdWx0Lmluc3RhbmNlLnNpZ25Db25maWdzLmZpbmQoZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQuaWQgPT09ICR1c2VyRGF0YUNvbnRleHQuZGVmYXVsdC5JbnMuc2lnbi5kYXkgKyAxO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBlID0gW107XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0LnJld2FyZHRweWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIG8gPSB0LnJld2FyZHRweWVbaV07XHJcbiAgICAgICAgICAgIGlmICgxID09PSBvKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbiA9ICRyb2xlQ29udGV4dC5kZWZhdWx0Lmlucy5nZXRHdW5Ta2luSW5mbygyKTtcclxuICAgICAgICAgICAgICAgIG4uc2hhcmQgKz0gMTtcclxuICAgICAgICAgICAgICAgICRyb2xlQ29udGV4dC5kZWZhdWx0Lmlucy5zZXRHdW5Ta2luSW5mbyhuKTtcclxuICAgICAgICAgICAgICAgIGUucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogMTAsXHJcbiAgICAgICAgICAgICAgICAgICAgZXh0OiAyLFxyXG4gICAgICAgICAgICAgICAgICAgIG51bTogMVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoMiA9PT0gbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gJGNvbmZpZ0NvbnRleHQuZGVmYXVsdC5pbnN0YW5jZS5nZW1Db25maWdzLmZpbHRlcihmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gNCA9PT0gdC5HcmFkZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHNbJHNlZWRVdGlsLmRlZmF1bHQucmFuZG9tRnJvbSgwLCBzLmxlbmd0aCAtIDEpXTtcclxuICAgICAgICAgICAgICAgICAgICAkcm9sZUNvbnRleHQuZGVmYXVsdC5pbnMuYWRkUGFja0l0ZW0oYSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogNSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0OiBhLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBudW06IDFcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgMyA9PT0gb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICgkdXNlckRhdGFDb250ZXh0LmRlZmF1bHQuSW5zLm9wZWFyQ29pbih0Lm51bVtpXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtOiB0Lm51bVtpXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDQgPT09IG8gJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAoJHVzZXJEYXRhQ29udGV4dC5kZWZhdWx0Lklucy5vcGVhckRpYW1vbmQodC5udW1baV0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IDYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bTogdC5udW1baV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgJHBvcHVwTWFuYWdlci5Qb3B1cE1hbmFnZXIuaW5zdGFuY2Uub3BlbigkYXNzZXRzTWFwLkFzc2V0c01hcC5Qb3BVcEJ1bmRsZXMucHJlZmFicy5hc3NldHNMaXN0LlJld2FyZFZpZXcsIHtcclxuICAgICAgICAgICAgaW5mb3M6IGVcclxuICAgICAgICB9KTtcclxuICAgICAgICAkdXNlckRhdGFDb250ZXh0LmRlZmF1bHQuSW5zLnNpZ25SZWNvcmQoKTtcclxuICAgIH07XHJcbiAgICBfX2RlY29yYXRlKFtiKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwiYnRuQWRcIiwgdm9pZCAwKTtcclxuICAgIF9fZGVjb3JhdGUoW2IoY2MuTm9kZSldLCBlLnByb3RvdHlwZSwgXCJzaWduQ29udGVudFwiLCB2b2lkIDApO1xyXG4gICAgX19kZWNvcmF0ZShbYihjYy5Ob2RlKV0sIGUucHJvdG90eXBlLCBcImNvdW50TGF5ZXJcIiwgdm9pZCAwKTtcclxuICAgIHJldHVybiBfX2RlY29yYXRlKFt2XSwgZSk7XHJcbn0pKCRwb3B1cFZpZXcuUG9wdXBWaWV3KTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gdztcclxuIl19