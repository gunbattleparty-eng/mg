{"version":3,"sources":["assets\\game_script\\scripts\\PasswordBasedCipher.js"],"names":["exports","PasswordBasedCipher","$serializableCipher","require","$wordArray","$openSSL","$openSSLKdf","a","t","encrypt","e","i","n","s","Object","assign","cfg","kdf","Error","r","execute","keySize","ivSize","iv","SerializableCipher","call","key","extend","decrypt","format","_parse","salt","parse","blockSize","WordArray","OpenSSL","OpenSSLKdf"],"mappings":"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","sourceRoot":"/","sourcesContent":["exports.PasswordBasedCipher = void 0;\r\nvar $serializableCipher = require(\"./SerializableCipher\");\r\nvar $wordArray = require(\"./WordArray\");\r\nvar $openSSL = require(\"./OpenSSL\");\r\nvar $openSSLKdf = require(\"./OpenSSLKdf\");\r\nvar a = (function () {\r\n    function t() {}\r\n    t.encrypt = function (t, e, i, n) {\r\n        var s = Object.assign({}, this.cfg, n);\r\n        if (void 0 === s.kdf) {\r\n            throw new Error(\"missing kdf in config\");\r\n        }\r\n        var r = s.kdf.execute(i, t.keySize, t.ivSize);\r\n        if (void 0 !== r.iv) {\r\n            s.iv = r.iv;\r\n        }\r\n        return $serializableCipher.SerializableCipher.encrypt.call(this, t, e, r.key, s).extend(r);\r\n    };\r\n    t.decrypt = function (t, e, i, n) {\r\n        var s = Object.assign({}, this.cfg, n);\r\n        if (void 0 === s.format) {\r\n            throw new Error(\"missing format in config\");\r\n        }\r\n        e = this._parse(e, s.format);\r\n        if (void 0 === s.kdf) {\r\n            throw new Error(\"the key derivation function must be set\");\r\n        }\r\n        var r = s.kdf.execute(i, t.keySize, t.ivSize, e.salt);\r\n        if (void 0 !== r.iv) {\r\n            s.iv = r.iv;\r\n        }\r\n        return $serializableCipher.SerializableCipher.decrypt.call(this, t, e, r.key, s);\r\n    };\r\n    t._parse = function (t, e) {\r\n        return \"string\" == typeof t ? e.parse(t) : t;\r\n    };\r\n    t.cfg = {\r\n        blockSize: 4,\r\n        iv: new $wordArray.WordArray([]),\r\n        format: $openSSL.OpenSSL,\r\n        kdf: $openSSLKdf.OpenSSLKdf\r\n    };\r\n    return t;\r\n})();\r\nexports.PasswordBasedCipher = a;\r\n"]}