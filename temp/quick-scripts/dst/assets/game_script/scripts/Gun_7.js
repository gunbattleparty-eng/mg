
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/game_script/scripts/Gun_7.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '83768TXaqZBYr/HMnibl+6q', 'Gun_7');
// game_script/scripts/Gun_7.js

"use strict";

var o;

var $assetsLoader = require("./AssetsLoader");

var $assetsMap = require("./AssetsMap");

var $resUtil = require("./ResUtil");

var $eventManager = require("./EventManager");

var $remoteAudio = require("./RemoteAudio");

var $configContext = require("./ConfigContext");

var $globalParam = require("./GlobalParam");

var $localEventName = require("./LocalEventName");

var $baseBullet = require("./BaseBullet");

var $bullet_17 = require("./Bullet_17");

var $gameContext = require("./GameContext");

var $gameSkillInfo = require("./GameSkillInfo");

var $baseGun = require("./BaseGun");

var _ = cc.Vec3.ZERO;

var k = function (t) {
  function e(e) {
    var i = t.call(this, e) || this;
    i.status = 0;
    i.bullet = null;
    i.currTargetEnemys = [];
    i.targetPos = cc.Vec3.ZERO;
    i.atkLeft = 0;
    i.atkEndLeft = 0;
    i.skillId = 116;
    i.isAtkMaser = !1;
    i.skillParam = $gameContext["default"].ins.skillInfo.getSkillById(i.skillId);
    return i;
  }

  __extends(e, t);

  e.prototype.initBullet = function () {
    var t = $assetsLoader["default"].instance.getRes($assetsMap.BundleNames.Game, $assetsMap.AssetsMap.GameBundles.prefabs.assetsList.Bullet_17);
    this.bullet = $resUtil.ResUtil.instantiate(t, $gameContext["default"].ins.buttleLayer.parent).getComponent($bullet_17["default"]);
    this.bullet.skillSpecialitys = $configContext["default"].instance.basicSkillConfigMap.get(this.skillId).skill_tpye;
    this.bullet.node.active = !1;
  };

  e.prototype.updateF = function (e) {
    t.prototype.updateF.call(this, e);

    if (!$globalParam["default"].isGamePuase) {
      0 === this.status ? (this.timeLeft -= e, this.timeLeft <= 0 ? (this.timeLeft = this.skillParam.skillCD[$gameSkillInfo.Skill4Param.FINAL], $eventManager["default"].send($localEventName["default"].RENDER_SKILL_CD_INFO, this.skillId, 0, -1), this.startGun() ? (this.timeLeft = this.skillParam.skillCD[$gameSkillInfo.Skill4Param.FINAL], this.atkEndLeft = this.skillParam.guideLaserTime, this.status = 2, $eventManager["default"].send($localEventName["default"].RENDER_SKILL_CD_INFO, this.skillId, 1, -1)) : this.timeLeft = 0) : $eventManager["default"].send($localEventName["default"].RENDER_SKILL_CD_INFO, this.skillId, this.timeLeft / this.skillParam.skillCD[$gameSkillInfo.Skill4Param.FINAL], -1)) : 1 === this.status ? this.finding(e) : 2 === this.status && this.attacking(e);
    }
  };

  e.prototype.finding = function (t) {
    this.currTargetEnemys[0].node.position.sub(this.targetPos).normalize(_);
    this.bullet.velocity.set(_).multiplyScalar(this.skillParam.guideLaserSpeed);
    this.targetPos.x += this.bullet.velocity.x * t;
    this.targetPos.y += this.bullet.velocity.y * t;
    this.targetPos.sub(this.currTargetEnemys[0].getPosition()).magSqr() <= 900 ? (this.bullet.render(this.currTargetEnemys.map(function (t) {
      return t.getPosition();
    }), this.currTargetEnemys), this.status = 2) : this.bullet.render([this.targetPos], null);
  };

  e.prototype.attacking = function (t) {
    this.atkEndLeft -= t;

    if (this.atkEndLeft <= 0) {
      this.endSend(!0);
    } else {
      this.bullet.render(this.currTargetEnemys.map(function (t) {
        return t.getPosition();
      }), this.currTargetEnemys);
      this.atkLeft -= t;

      if (this.atkLeft <= 0) {
        this.atkLeft = this.skillParam.guideLaserAtkInterval;

        for (var e = 0; e < this.currTargetEnemys.length; e++) {
          this.currTargetEnemys[e].sufferAtk({
            id: this.skillId,
            skillSpecialitys: this.bullet.skillSpecialitys,
            atk: 0 === e ? this.skillParam.guideLaserMaserAtk[$gameSkillInfo.Skill4Param.FINAL] : this.skillParam.skillAtk[$gameSkillInfo.Skill4Param.FINAL]
          }) && this.skillParam.addGuideLaserAtkAdd();
          0 === e && this.isAtkMaser && (this.isAtkMaser = !1, this.skillParam.guideLaserBoomAtk[$gameSkillInfo.Skill4Param.FINAL] > 0 && this.createButtleBoom(), this.skillParam.guideLaserIsThunder && this.createTunder(this.currTargetEnemys[e]));
        }
      }
    }
  };

  e.prototype.startGun = function () {
    var t = $gameContext["default"].ins.getRandomEnemys(this.pointNode, this.skillParam.guideLaserRefractCount, this.skillParam.skillAtkRange[$gameSkillInfo.Skill4Param.FINAL]);
    return !(t.length <= 0 || (this.atkLeft = this.skillParam.guideLaserAtkInterval, this.currTargetEnemys.length = 0, this.currTargetEnemys = t, this.bullet.initButtle(null, this.skillId), this.bullet.insert($gameContext["default"].ins.buttleLayer), this.bullet.setPosition(this.pointNode.position.clone()), this.bullet.node.active = !0, this.atkMaserAndLock(), this.status = 2, 0));
  };

  e.prototype.enemyDie = function (t) {
    var e;
    var i = this.currTargetEnemys.indexOf(t);

    if (-1 !== i) {
      0 === i ? (this.targetPos = t.getPosition().clone(), (e = $gameContext["default"].ins.getRandomEnemys(this.pointNode, this.skillParam.guideLaserRefractCount, 99999)).length <= 0 ? this.endSend(!0) : (this.endSend(), this.currTargetEnemys = e, this.atkMaserAndLock(), this.status = 1)) : (e = $gameContext["default"].ins.getRandomEnemys(this.currTargetEnemys[i - 1].node, 1, this.skillParam.guideLaserRefractRange)).length > 0 ? (this.currTargetEnemys[i] = e[0], this.currTargetEnemys[i].addDieCallback(this.enemyDie, this)) : this.currTargetEnemys.slice(i, 1);
    }
  };

  e.prototype.atkMaserAndLock = function () {
    this.isAtkMaser = !0;

    for (var t = 0; t < this.currTargetEnemys.length; t++) {
      this.currTargetEnemys[t].addDieCallback(this.enemyDie, this);
    }
  };

  e.prototype.createTunder = function (t) {
    var e = $gameContext["default"].ins.getButtlePool($baseBullet.BulletType.thunder_bullet);

    if (!e) {
      var i = $assetsLoader["default"].instance.getRes($assetsMap.BundleNames.Game, $assetsMap.AssetsMap.GameBundles.prefabs.assetsList.Bullet_9);
      (e = $resUtil.ResUtil.instantiate(i, $gameContext["default"].ins.buttleLayer.parent).getComponent($baseBullet["default"])).skillSpecialitys = $configContext["default"].instance.basicSkillConfigMap.get(61).skill_tpye;
    }

    e.setPosition(t.node.position.clone());
    $remoteAudio["default"].instance.playEffectMusic("Lightningstrike");
    e.targetEnemy = t;
    e.targetPos = t.getPosition().clone();
    e.isExtra = !0;
    e.initButtle(null, 61);
    e.initParam(this.skillParam.guideLaserThunderAtk[$gameSkillInfo.Skill4Param.FINAL]);
    e.insert($gameContext["default"].ins.buttleLayer);
    e.setAnimation("");
  };

  e.prototype.createButtleBoom = function () {
    var t = $gameContext["default"].ins.getButtlePool($baseBullet.BulletType.guide_laser_boom);

    if (!t) {
      var e = $assetsLoader["default"].instance.getRes($assetsMap.BundleNames.Game, $assetsMap.AssetsMap.GameBundles.prefabs.assetsList.Bullet_18);
      t = $resUtil.ResUtil.instantiate(e, $gameContext["default"].ins.lowBulletLayer.parent).getComponent($baseBullet["default"]);
    }

    t.setPosition(this.currTargetEnemys[0].node.position.add(cc.v3(0, 30)));
    t.initButtle(null, this.skillId);
    t.insert($gameContext["default"].ins.lowBulletLayer);
    t.setAnimation(null);
  };

  e.prototype.endSend = function (t) {
    var e = this;

    if (void 0 === t) {
      t = !1;
    }

    if (t) {
      this.bullet.removeSelf(!1);
      this.bullet.node.parent = null;
      this.bullet.node.active = !1;
      this.atkEndLeft = this.skillParam.guideLaserTime;
      this.status = 0;
      this.timeLeft = this.skillParam.skillCD[$gameSkillInfo.Skill4Param.FINAL];
    }

    this.currTargetEnemys.forEach(function (t) {
      if (t) {
        t.removeDieCallback(e);
      }
    });
    this.currTargetEnemys.length = 0;
  };

  return e;
}($baseGun["default"]);

exports["default"] = k;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcZ2FtZV9zY3JpcHRcXHNjcmlwdHNcXEd1bl83LmpzIl0sIm5hbWVzIjpbIm8iLCIkYXNzZXRzTG9hZGVyIiwicmVxdWlyZSIsIiRhc3NldHNNYXAiLCIkcmVzVXRpbCIsIiRldmVudE1hbmFnZXIiLCIkcmVtb3RlQXVkaW8iLCIkY29uZmlnQ29udGV4dCIsIiRnbG9iYWxQYXJhbSIsIiRsb2NhbEV2ZW50TmFtZSIsIiRiYXNlQnVsbGV0IiwiJGJ1bGxldF8xNyIsIiRnYW1lQ29udGV4dCIsIiRnYW1lU2tpbGxJbmZvIiwiJGJhc2VHdW4iLCJfIiwiY2MiLCJWZWMzIiwiWkVSTyIsImsiLCJ0IiwiZSIsImkiLCJjYWxsIiwic3RhdHVzIiwiYnVsbGV0IiwiY3VyclRhcmdldEVuZW15cyIsInRhcmdldFBvcyIsImF0a0xlZnQiLCJhdGtFbmRMZWZ0Iiwic2tpbGxJZCIsImlzQXRrTWFzZXIiLCJza2lsbFBhcmFtIiwiaW5zIiwic2tpbGxJbmZvIiwiZ2V0U2tpbGxCeUlkIiwiX19leHRlbmRzIiwicHJvdG90eXBlIiwiaW5pdEJ1bGxldCIsImluc3RhbmNlIiwiZ2V0UmVzIiwiQnVuZGxlTmFtZXMiLCJHYW1lIiwiQXNzZXRzTWFwIiwiR2FtZUJ1bmRsZXMiLCJwcmVmYWJzIiwiYXNzZXRzTGlzdCIsIkJ1bGxldF8xNyIsIlJlc1V0aWwiLCJpbnN0YW50aWF0ZSIsImJ1dHRsZUxheWVyIiwicGFyZW50IiwiZ2V0Q29tcG9uZW50Iiwic2tpbGxTcGVjaWFsaXR5cyIsImJhc2ljU2tpbGxDb25maWdNYXAiLCJnZXQiLCJza2lsbF90cHllIiwibm9kZSIsImFjdGl2ZSIsInVwZGF0ZUYiLCJpc0dhbWVQdWFzZSIsInRpbWVMZWZ0Iiwic2tpbGxDRCIsIlNraWxsNFBhcmFtIiwiRklOQUwiLCJzZW5kIiwiUkVOREVSX1NLSUxMX0NEX0lORk8iLCJzdGFydEd1biIsImd1aWRlTGFzZXJUaW1lIiwiZmluZGluZyIsImF0dGFja2luZyIsInBvc2l0aW9uIiwic3ViIiwibm9ybWFsaXplIiwidmVsb2NpdHkiLCJzZXQiLCJtdWx0aXBseVNjYWxhciIsImd1aWRlTGFzZXJTcGVlZCIsIngiLCJ5IiwiZ2V0UG9zaXRpb24iLCJtYWdTcXIiLCJyZW5kZXIiLCJtYXAiLCJlbmRTZW5kIiwiZ3VpZGVMYXNlckF0a0ludGVydmFsIiwibGVuZ3RoIiwic3VmZmVyQXRrIiwiaWQiLCJhdGsiLCJndWlkZUxhc2VyTWFzZXJBdGsiLCJza2lsbEF0ayIsImFkZEd1aWRlTGFzZXJBdGtBZGQiLCJndWlkZUxhc2VyQm9vbUF0ayIsImNyZWF0ZUJ1dHRsZUJvb20iLCJndWlkZUxhc2VySXNUaHVuZGVyIiwiY3JlYXRlVHVuZGVyIiwiZ2V0UmFuZG9tRW5lbXlzIiwicG9pbnROb2RlIiwiZ3VpZGVMYXNlclJlZnJhY3RDb3VudCIsInNraWxsQXRrUmFuZ2UiLCJpbml0QnV0dGxlIiwiaW5zZXJ0Iiwic2V0UG9zaXRpb24iLCJjbG9uZSIsImF0a01hc2VyQW5kTG9jayIsImVuZW15RGllIiwiaW5kZXhPZiIsImd1aWRlTGFzZXJSZWZyYWN0UmFuZ2UiLCJhZGREaWVDYWxsYmFjayIsInNsaWNlIiwiZ2V0QnV0dGxlUG9vbCIsIkJ1bGxldFR5cGUiLCJ0aHVuZGVyX2J1bGxldCIsIkJ1bGxldF85IiwicGxheUVmZmVjdE11c2ljIiwidGFyZ2V0RW5lbXkiLCJpc0V4dHJhIiwiaW5pdFBhcmFtIiwiZ3VpZGVMYXNlclRodW5kZXJBdGsiLCJzZXRBbmltYXRpb24iLCJndWlkZV9sYXNlcl9ib29tIiwiQnVsbGV0XzE4IiwibG93QnVsbGV0TGF5ZXIiLCJhZGQiLCJ2MyIsInJlbW92ZVNlbGYiLCJmb3JFYWNoIiwicmVtb3ZlRGllQ2FsbGJhY2siLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLENBQUo7O0FBQ0EsSUFBSUMsYUFBYSxHQUFHQyxPQUFPLENBQUMsZ0JBQUQsQ0FBM0I7O0FBQ0EsSUFBSUMsVUFBVSxHQUFHRCxPQUFPLENB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SUFDSDs7SUFDRCxJQUFJQSxDQUFKLEVBQU87TUFDSCxLQUFLSyxNQUFMLENBQVlxRyxVQUFaLENBQXVCLENBQUMsQ0FBeEI7TUFDQSxLQUFLckcsTUFBTCxDQUFZZ0MsSUFBWixDQUFpQk4sTUFBakIsR0FBMEIsSUFBMUI7TUFDQSxLQUFLMUIsTUFBTCxDQUFZZ0MsSUFBWixDQUFpQkMsTUFBakIsR0FBMEIsQ0FBQyxDQUEzQjtNQUNBLEtBQUs3QixVQUFMLEdBQWtCLEtBQUtHLFVBQUwsQ0FBZ0JvQyxjQUFsQztNQUNBLEtBQUs1QyxNQUFMLEdBQWMsQ0FBZDtNQUNBLEtBQUtxQyxRQUFMLEdBQWdCLEtBQUs3QixVQUFMLENBQWdCOEIsT0FBaEIsQ0FBd0JqRCxjQUFjLENBQUNrRCxXQUFmLENBQTJCQyxLQUFuRCxDQUFoQjtJQUNIOztJQUNELEtBQUt0QyxnQkFBTCxDQUFzQnFHLE9BQXRCLENBQThCLFVBQVUzRyxDQUFWLEVBQWE7TUFDdkMsSUFBSUEsQ0FBSixFQUFPO1FBQ0hBLENBQUMsQ0FBQzRHLGlCQUFGLENBQW9CM0csQ0FBcEI7TUFDSDtJQUNKLENBSkQ7SUFLQSxLQUFLSyxnQkFBTCxDQUFzQjRELE1BQXRCLEdBQStCLENBQS9CO0VBQ0gsQ0FuQkQ7O0VBb0JBLE9BQU9qRSxDQUFQO0FBQ0gsQ0FsTk8sQ0FrTkxQLFFBQVEsV0FsTkgsQ0FBUjs7QUFtTkFtSCxPQUFPLFdBQVAsR0FBa0I5RyxDQUFsQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG87XHJcbnZhciAkYXNzZXRzTG9hZGVyID0gcmVxdWlyZShcIi4vQXNzZXRzTG9hZGVyXCIpO1xyXG52YXIgJGFzc2V0c01hcCA9IHJlcXVpcmUoXCIuL0Fzc2V0c01hcFwiKTtcclxudmFyICRyZXNVdGlsID0gcmVxdWlyZShcIi4vUmVzVXRpbFwiKTtcclxudmFyICRldmVudE1hbmFnZXIgPSByZXF1aXJlKFwiLi9FdmVudE1hbmFnZXJcIik7XHJcbnZhciAkcmVtb3RlQXVkaW8gPSByZXF1aXJlKFwiLi9SZW1vdGVBdWRpb1wiKTtcclxudmFyICRjb25maWdDb250ZXh0ID0gcmVxdWlyZShcIi4vQ29uZmlnQ29udGV4dFwiKTtcclxudmFyICRnbG9iYWxQYXJhbSA9IHJlcXVpcmUoXCIuL0dsb2JhbFBhcmFtXCIpO1xyXG52YXIgJGxvY2FsRXZlbnROYW1lID0gcmVxdWlyZShcIi4vTG9jYWxFdmVudE5hbWVcIik7XHJcbnZhciAkYmFzZUJ1bGxldCA9IHJlcXVpcmUoXCIuL0Jhc2VCdWxsZXRcIik7XHJcbnZhciAkYnVsbGV0XzE3ID0gcmVxdWlyZShcIi4vQnVsbGV0XzE3XCIpO1xyXG52YXIgJGdhbWVDb250ZXh0ID0gcmVxdWlyZShcIi4vR2FtZUNvbnRleHRcIik7XHJcbnZhciAkZ2FtZVNraWxsSW5mbyA9IHJlcXVpcmUoXCIuL0dhbWVTa2lsbEluZm9cIik7XHJcbnZhciAkYmFzZUd1biA9IHJlcXVpcmUoXCIuL0Jhc2VHdW5cIik7XHJcbnZhciBfID0gY2MuVmVjMy5aRVJPO1xyXG52YXIgayA9IChmdW5jdGlvbiAodCkge1xyXG4gICAgZnVuY3Rpb24gZShlKSB7XHJcbiAgICAgICAgdmFyIGkgPSB0LmNhbGwodGhpcywgZSkgfHwgdGhpcztcclxuICAgICAgICBpLnN0YXR1cyA9IDA7XHJcbiAgICAgICAgaS5idWxsZXQgPSBudWxsO1xyXG4gICAgICAgIGkuY3VyclRhcmdldEVuZW15cyA9IFtdO1xyXG4gICAgICAgIGkudGFyZ2V0UG9zID0gY2MuVmVjMy5aRVJPO1xyXG4gICAgICAgIGkuYXRrTGVmdCA9IDA7XHJcbiAgICAgICAgaS5hdGtFbmRMZWZ0ID0gMDtcclxuICAgICAgICBpLnNraWxsSWQgPSAxMTY7XHJcbiAgICAgICAgaS5pc0F0a01hc2VyID0gITE7XHJcbiAgICAgICAgaS5za2lsbFBhcmFtID0gJGdhbWVDb250ZXh0LmRlZmF1bHQuaW5zLnNraWxsSW5mby5nZXRTa2lsbEJ5SWQoaS5za2lsbElkKTtcclxuICAgICAgICByZXR1cm4gaTtcclxuICAgIH1cclxuICAgIF9fZXh0ZW5kcyhlLCB0KTtcclxuICAgIGUucHJvdG90eXBlLmluaXRCdWxsZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHQgPSAkYXNzZXRzTG9hZGVyLmRlZmF1bHQuaW5zdGFuY2UuZ2V0UmVzKFxyXG4gICAgICAgICAgICAkYXNzZXRzTWFwLkJ1bmRsZU5hbWVzLkdhbWUsXHJcbiAgICAgICAgICAgICRhc3NldHNNYXAuQXNzZXRzTWFwLkdhbWVCdW5kbGVzLnByZWZhYnMuYXNzZXRzTGlzdC5CdWxsZXRfMTdcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuYnVsbGV0ID0gJHJlc1V0aWwuUmVzVXRpbC5pbnN0YW50aWF0ZSh0LCAkZ2FtZUNvbnRleHQuZGVmYXVsdC5pbnMuYnV0dGxlTGF5ZXIucGFyZW50KS5nZXRDb21wb25lbnQoXHJcbiAgICAgICAgICAgICRidWxsZXRfMTcuZGVmYXVsdFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgdGhpcy5idWxsZXQuc2tpbGxTcGVjaWFsaXR5cyA9ICRjb25maWdDb250ZXh0LmRlZmF1bHQuaW5zdGFuY2UuYmFzaWNTa2lsbENvbmZpZ01hcC5nZXQodGhpcy5za2lsbElkKS5za2lsbF90cHllO1xyXG4gICAgICAgIHRoaXMuYnVsbGV0Lm5vZGUuYWN0aXZlID0gITE7XHJcbiAgICB9O1xyXG4gICAgZS5wcm90b3R5cGUudXBkYXRlRiA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdC5wcm90b3R5cGUudXBkYXRlRi5jYWxsKHRoaXMsIGUpO1xyXG4gICAgICAgIGlmICghJGdsb2JhbFBhcmFtLmRlZmF1bHQuaXNHYW1lUHVhc2UpIHtcclxuICAgICAgICAgICAgMCA9PT0gdGhpcy5zdGF0dXNcclxuICAgICAgICAgICAgICAgID8gKCh0aGlzLnRpbWVMZWZ0IC09IGUpLFxyXG4gICAgICAgICAgICAgICAgICB0aGlzLnRpbWVMZWZ0IDw9IDBcclxuICAgICAgICAgICAgICAgICAgICAgID8gKCh0aGlzLnRpbWVMZWZ0ID0gdGhpcy5za2lsbFBhcmFtLnNraWxsQ0RbJGdhbWVTa2lsbEluZm8uU2tpbGw0UGFyYW0uRklOQUxdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50TWFuYWdlci5kZWZhdWx0LnNlbmQoJGxvY2FsRXZlbnROYW1lLmRlZmF1bHQuUkVOREVSX1NLSUxMX0NEX0lORk8sIHRoaXMuc2tpbGxJZCwgMCwgLTEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0R3VuKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKCh0aGlzLnRpbWVMZWZ0ID0gdGhpcy5za2lsbFBhcmFtLnNraWxsQ0RbJGdhbWVTa2lsbEluZm8uU2tpbGw0UGFyYW0uRklOQUxdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuYXRrRW5kTGVmdCA9IHRoaXMuc2tpbGxQYXJhbS5ndWlkZUxhc2VyVGltZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnN0YXR1cyA9IDIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZXZlbnRNYW5hZ2VyLmRlZmF1bHQuc2VuZChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhbEV2ZW50TmFtZS5kZWZhdWx0LlJFTkRFUl9TS0lMTF9DRF9JTkZPLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5za2lsbElkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0xXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICh0aGlzLnRpbWVMZWZ0ID0gMCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICA6ICRldmVudE1hbmFnZXIuZGVmYXVsdC5zZW5kKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2FsRXZlbnROYW1lLmRlZmF1bHQuUkVOREVSX1NLSUxMX0NEX0lORk8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNraWxsSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbWVMZWZ0IC8gdGhpcy5za2lsbFBhcmFtLnNraWxsQ0RbJGdhbWVTa2lsbEluZm8uU2tpbGw0UGFyYW0uRklOQUxdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLTFcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSlcclxuICAgICAgICAgICAgICAgIDogMSA9PT0gdGhpcy5zdGF0dXNcclxuICAgICAgICAgICAgICAgID8gdGhpcy5maW5kaW5nKGUpXHJcbiAgICAgICAgICAgICAgICA6IDIgPT09IHRoaXMuc3RhdHVzICYmIHRoaXMuYXR0YWNraW5nKGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBlLnByb3RvdHlwZS5maW5kaW5nID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICB0aGlzLmN1cnJUYXJnZXRFbmVteXNbMF0ubm9kZS5wb3NpdGlvbi5zdWIodGhpcy50YXJnZXRQb3MpLm5vcm1hbGl6ZShfKTtcclxuICAgICAgICB0aGlzLmJ1bGxldC52ZWxvY2l0eS5zZXQoXykubXVsdGlwbHlTY2FsYXIodGhpcy5za2lsbFBhcmFtLmd1aWRlTGFzZXJTcGVlZCk7XHJcbiAgICAgICAgdGhpcy50YXJnZXRQb3MueCArPSB0aGlzLmJ1bGxldC52ZWxvY2l0eS54ICogdDtcclxuICAgICAgICB0aGlzLnRhcmdldFBvcy55ICs9IHRoaXMuYnVsbGV0LnZlbG9jaXR5LnkgKiB0O1xyXG4gICAgICAgIHRoaXMudGFyZ2V0UG9zLnN1Yih0aGlzLmN1cnJUYXJnZXRFbmVteXNbMF0uZ2V0UG9zaXRpb24oKSkubWFnU3FyKCkgPD0gOTAwXHJcbiAgICAgICAgICAgID8gKHRoaXMuYnVsbGV0LnJlbmRlcihcclxuICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyVGFyZ2V0RW5lbXlzLm1hcChmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuZ2V0UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuY3VyclRhcmdldEVuZW15c1xyXG4gICAgICAgICAgICAgICksXHJcbiAgICAgICAgICAgICAgKHRoaXMuc3RhdHVzID0gMikpXHJcbiAgICAgICAgICAgIDogdGhpcy5idWxsZXQucmVuZGVyKFt0aGlzLnRhcmdldFBvc10sIG51bGwpO1xyXG4gICAgfTtcclxuICAgIGUucHJvdG90eXBlLmF0dGFja2luZyA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgdGhpcy5hdGtFbmRMZWZ0IC09IHQ7XHJcbiAgICAgICAgaWYgKHRoaXMuYXRrRW5kTGVmdCA8PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW5kU2VuZCghMCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5idWxsZXQucmVuZGVyKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyVGFyZ2V0RW5lbXlzLm1hcChmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmdldFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VyclRhcmdldEVuZW15c1xyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0aGlzLmF0a0xlZnQgLT0gdDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYXRrTGVmdCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF0a0xlZnQgPSB0aGlzLnNraWxsUGFyYW0uZ3VpZGVMYXNlckF0a0ludGVydmFsO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IDA7IGUgPCB0aGlzLmN1cnJUYXJnZXRFbmVteXMubGVuZ3RoOyBlKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJUYXJnZXRFbmVteXNbZV0uc3VmZmVyQXRrKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMuc2tpbGxJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2tpbGxTcGVjaWFsaXR5czogdGhpcy5idWxsZXQuc2tpbGxTcGVjaWFsaXR5cyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXRrOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMCA9PT0gZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5za2lsbFBhcmFtLmd1aWRlTGFzZXJNYXNlckF0a1skZ2FtZVNraWxsSW5mby5Ta2lsbDRQYXJhbS5GSU5BTF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuc2tpbGxQYXJhbS5za2lsbEF0a1skZ2FtZVNraWxsSW5mby5Ta2lsbDRQYXJhbS5GSU5BTF1cclxuICAgICAgICAgICAgICAgICAgICB9KSAmJiB0aGlzLnNraWxsUGFyYW0uYWRkR3VpZGVMYXNlckF0a0FkZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIDAgPT09IGUgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0F0a01hc2VyICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICgodGhpcy5pc0F0a01hc2VyID0gITEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNraWxsUGFyYW0uZ3VpZGVMYXNlckJvb21BdGtbJGdhbWVTa2lsbEluZm8uU2tpbGw0UGFyYW0uRklOQUxdID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVCdXR0bGVCb29tKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2tpbGxQYXJhbS5ndWlkZUxhc2VySXNUaHVuZGVyICYmIHRoaXMuY3JlYXRlVHVuZGVyKHRoaXMuY3VyclRhcmdldEVuZW15c1tlXSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGUucHJvdG90eXBlLnN0YXJ0R3VuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0ID0gJGdhbWVDb250ZXh0LmRlZmF1bHQuaW5zLmdldFJhbmRvbUVuZW15cyhcclxuICAgICAgICAgICAgdGhpcy5wb2ludE5vZGUsXHJcbiAgICAgICAgICAgIHRoaXMuc2tpbGxQYXJhbS5ndWlkZUxhc2VyUmVmcmFjdENvdW50LFxyXG4gICAgICAgICAgICB0aGlzLnNraWxsUGFyYW0uc2tpbGxBdGtSYW5nZVskZ2FtZVNraWxsSW5mby5Ta2lsbDRQYXJhbS5GSU5BTF1cclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiAhKFxyXG4gICAgICAgICAgICB0Lmxlbmd0aCA8PSAwIHx8XHJcbiAgICAgICAgICAgICgodGhpcy5hdGtMZWZ0ID0gdGhpcy5za2lsbFBhcmFtLmd1aWRlTGFzZXJBdGtJbnRlcnZhbCksXHJcbiAgICAgICAgICAgICh0aGlzLmN1cnJUYXJnZXRFbmVteXMubGVuZ3RoID0gMCksXHJcbiAgICAgICAgICAgICh0aGlzLmN1cnJUYXJnZXRFbmVteXMgPSB0KSxcclxuICAgICAgICAgICAgdGhpcy5idWxsZXQuaW5pdEJ1dHRsZShudWxsLCB0aGlzLnNraWxsSWQpLFxyXG4gICAgICAgICAgICB0aGlzLmJ1bGxldC5pbnNlcnQoJGdhbWVDb250ZXh0LmRlZmF1bHQuaW5zLmJ1dHRsZUxheWVyKSxcclxuICAgICAgICAgICAgdGhpcy5idWxsZXQuc2V0UG9zaXRpb24odGhpcy5wb2ludE5vZGUucG9zaXRpb24uY2xvbmUoKSksXHJcbiAgICAgICAgICAgICh0aGlzLmJ1bGxldC5ub2RlLmFjdGl2ZSA9ICEwKSxcclxuICAgICAgICAgICAgdGhpcy5hdGtNYXNlckFuZExvY2soKSxcclxuICAgICAgICAgICAgKHRoaXMuc3RhdHVzID0gMiksXHJcbiAgICAgICAgICAgIDApXHJcbiAgICAgICAgKTtcclxuICAgIH07XHJcbiAgICBlLnByb3RvdHlwZS5lbmVteURpZSA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgdmFyIGU7XHJcbiAgICAgICAgdmFyIGkgPSB0aGlzLmN1cnJUYXJnZXRFbmVteXMuaW5kZXhPZih0KTtcclxuICAgICAgICBpZiAoLTEgIT09IGkpIHtcclxuICAgICAgICAgICAgMCA9PT0gaVxyXG4gICAgICAgICAgICAgICAgPyAoKHRoaXMudGFyZ2V0UG9zID0gdC5nZXRQb3NpdGlvbigpLmNsb25lKCkpLFxyXG4gICAgICAgICAgICAgICAgICAoZSA9ICRnYW1lQ29udGV4dC5kZWZhdWx0Lmlucy5nZXRSYW5kb21FbmVteXMoXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvaW50Tm9kZSxcclxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2tpbGxQYXJhbS5ndWlkZUxhc2VyUmVmcmFjdENvdW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgOTk5OTlcclxuICAgICAgICAgICAgICAgICAgKSkubGVuZ3RoIDw9IDBcclxuICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5lbmRTZW5kKCEwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgOiAodGhpcy5lbmRTZW5kKCksICh0aGlzLmN1cnJUYXJnZXRFbmVteXMgPSBlKSwgdGhpcy5hdGtNYXNlckFuZExvY2soKSwgKHRoaXMuc3RhdHVzID0gMSkpKVxyXG4gICAgICAgICAgICAgICAgOiAoZSA9ICRnYW1lQ29udGV4dC5kZWZhdWx0Lmlucy5nZXRSYW5kb21FbmVteXMoXHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJUYXJnZXRFbmVteXNbaSAtIDFdLm5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5za2lsbFBhcmFtLmd1aWRlTGFzZXJSZWZyYWN0UmFuZ2VcclxuICAgICAgICAgICAgICAgICAgKSkubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICAgICAgPyAoKHRoaXMuY3VyclRhcmdldEVuZW15c1tpXSA9IGVbMF0pLCB0aGlzLmN1cnJUYXJnZXRFbmVteXNbaV0uYWRkRGllQ2FsbGJhY2sodGhpcy5lbmVteURpZSwgdGhpcykpXHJcbiAgICAgICAgICAgICAgICA6IHRoaXMuY3VyclRhcmdldEVuZW15cy5zbGljZShpLCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZS5wcm90b3R5cGUuYXRrTWFzZXJBbmRMb2NrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuaXNBdGtNYXNlciA9ICEwO1xyXG4gICAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgdGhpcy5jdXJyVGFyZ2V0RW5lbXlzLmxlbmd0aDsgdCsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VyclRhcmdldEVuZW15c1t0XS5hZGREaWVDYWxsYmFjayh0aGlzLmVuZW15RGllLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZS5wcm90b3R5cGUuY3JlYXRlVHVuZGVyID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICB2YXIgZSA9ICRnYW1lQ29udGV4dC5kZWZhdWx0Lmlucy5nZXRCdXR0bGVQb29sKCRiYXNlQnVsbGV0LkJ1bGxldFR5cGUudGh1bmRlcl9idWxsZXQpO1xyXG4gICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICB2YXIgaSA9ICRhc3NldHNMb2FkZXIuZGVmYXVsdC5pbnN0YW5jZS5nZXRSZXMoXHJcbiAgICAgICAgICAgICAgICAkYXNzZXRzTWFwLkJ1bmRsZU5hbWVzLkdhbWUsXHJcbiAgICAgICAgICAgICAgICAkYXNzZXRzTWFwLkFzc2V0c01hcC5HYW1lQnVuZGxlcy5wcmVmYWJzLmFzc2V0c0xpc3QuQnVsbGV0XzlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgKGUgPSAkcmVzVXRpbC5SZXNVdGlsLmluc3RhbnRpYXRlKGksICRnYW1lQ29udGV4dC5kZWZhdWx0Lmlucy5idXR0bGVMYXllci5wYXJlbnQpLmdldENvbXBvbmVudChcclxuICAgICAgICAgICAgICAgICRiYXNlQnVsbGV0LmRlZmF1bHRcclxuICAgICAgICAgICAgKSkuc2tpbGxTcGVjaWFsaXR5cyA9ICRjb25maWdDb250ZXh0LmRlZmF1bHQuaW5zdGFuY2UuYmFzaWNTa2lsbENvbmZpZ01hcC5nZXQoNjEpLnNraWxsX3RweWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGUuc2V0UG9zaXRpb24odC5ub2RlLnBvc2l0aW9uLmNsb25lKCkpO1xyXG4gICAgICAgICRyZW1vdGVBdWRpby5kZWZhdWx0Lmluc3RhbmNlLnBsYXlFZmZlY3RNdXNpYyhcIkxpZ2h0bmluZ3N0cmlrZVwiKTtcclxuICAgICAgICBlLnRhcmdldEVuZW15ID0gdDtcclxuICAgICAgICBlLnRhcmdldFBvcyA9IHQuZ2V0UG9zaXRpb24oKS5jbG9uZSgpO1xyXG4gICAgICAgIGUuaXNFeHRyYSA9ICEwO1xyXG4gICAgICAgIGUuaW5pdEJ1dHRsZShudWxsLCA2MSk7XHJcbiAgICAgICAgZS5pbml0UGFyYW0odGhpcy5za2lsbFBhcmFtLmd1aWRlTGFzZXJUaHVuZGVyQXRrWyRnYW1lU2tpbGxJbmZvLlNraWxsNFBhcmFtLkZJTkFMXSk7XHJcbiAgICAgICAgZS5pbnNlcnQoJGdhbWVDb250ZXh0LmRlZmF1bHQuaW5zLmJ1dHRsZUxheWVyKTtcclxuICAgICAgICBlLnNldEFuaW1hdGlvbihcIlwiKTtcclxuICAgIH07XHJcbiAgICBlLnByb3RvdHlwZS5jcmVhdGVCdXR0bGVCb29tID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0ID0gJGdhbWVDb250ZXh0LmRlZmF1bHQuaW5zLmdldEJ1dHRsZVBvb2woJGJhc2VCdWxsZXQuQnVsbGV0VHlwZS5ndWlkZV9sYXNlcl9ib29tKTtcclxuICAgICAgICBpZiAoIXQpIHtcclxuICAgICAgICAgICAgdmFyIGUgPSAkYXNzZXRzTG9hZGVyLmRlZmF1bHQuaW5zdGFuY2UuZ2V0UmVzKFxyXG4gICAgICAgICAgICAgICAgJGFzc2V0c01hcC5CdW5kbGVOYW1lcy5HYW1lLFxyXG4gICAgICAgICAgICAgICAgJGFzc2V0c01hcC5Bc3NldHNNYXAuR2FtZUJ1bmRsZXMucHJlZmFicy5hc3NldHNMaXN0LkJ1bGxldF8xOFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB0ID0gJHJlc1V0aWwuUmVzVXRpbC5pbnN0YW50aWF0ZShlLCAkZ2FtZUNvbnRleHQuZGVmYXVsdC5pbnMubG93QnVsbGV0TGF5ZXIucGFyZW50KS5nZXRDb21wb25lbnQoXHJcbiAgICAgICAgICAgICAgICAkYmFzZUJ1bGxldC5kZWZhdWx0XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHQuc2V0UG9zaXRpb24odGhpcy5jdXJyVGFyZ2V0RW5lbXlzWzBdLm5vZGUucG9zaXRpb24uYWRkKGNjLnYzKDAsIDMwKSkpO1xyXG4gICAgICAgIHQuaW5pdEJ1dHRsZShudWxsLCB0aGlzLnNraWxsSWQpO1xyXG4gICAgICAgIHQuaW5zZXJ0KCRnYW1lQ29udGV4dC5kZWZhdWx0Lmlucy5sb3dCdWxsZXRMYXllcik7XHJcbiAgICAgICAgdC5zZXRBbmltYXRpb24obnVsbCk7XHJcbiAgICB9O1xyXG4gICAgZS5wcm90b3R5cGUuZW5kU2VuZCA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xyXG4gICAgICAgIGlmICh2b2lkIDAgPT09IHQpIHtcclxuICAgICAgICAgICAgdCA9ICExO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1bGxldC5yZW1vdmVTZWxmKCExKTtcclxuICAgICAgICAgICAgdGhpcy5idWxsZXQubm9kZS5wYXJlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLmJ1bGxldC5ub2RlLmFjdGl2ZSA9ICExO1xyXG4gICAgICAgICAgICB0aGlzLmF0a0VuZExlZnQgPSB0aGlzLnNraWxsUGFyYW0uZ3VpZGVMYXNlclRpbWU7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gMDtcclxuICAgICAgICAgICAgdGhpcy50aW1lTGVmdCA9IHRoaXMuc2tpbGxQYXJhbS5za2lsbENEWyRnYW1lU2tpbGxJbmZvLlNraWxsNFBhcmFtLkZJTkFMXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdXJyVGFyZ2V0RW5lbXlzLmZvckVhY2goZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgIHQucmVtb3ZlRGllQ2FsbGJhY2soZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmN1cnJUYXJnZXRFbmVteXMubGVuZ3RoID0gMDtcclxuICAgIH07XHJcbiAgICByZXR1cm4gZTtcclxufSkoJGJhc2VHdW4uZGVmYXVsdCk7XHJcbmV4cG9ydHMuZGVmYXVsdCA9IGs7XHJcbiJdfQ==