
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/game_script/scripts/BaseAdNode.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '90eefh8E2BG1LI53Pw44itc', 'BaseAdNode');
// game_script/scripts/BaseAdNode.js

"use strict";

var o;

var $aDAssetsManager = require("./ADAssetsManager");

var r = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    e.adNode = null;
    e.adData = null;
    return e;
  }

  __extends(e, t);

  e.prototype.createNativeAd = function (t, e, i) {
    if (cc.isValid(this.adNode)) {
      this.adNode.destroy();
    }

    this.adNode = $aDAssetsManager["default"].instance.createNodeByPreloading($aDAssetsManager.adAssetsMap.prefabs[t]);
    this.adNode.zIndex = cc.macro.MAX_ZINDEX;
    var o = cc.director.getScene().getChildByName("Canvas");
    this.adNode.parent = o;
    var n = this.adNode.getChildByName("content");

    for (var r = 0; r < n.children.length; r++) {
      var a = n.children[r];

      if (a.name.includes("btn_click")) {
        a.on("click", e, this);
      }

      if (a.name.includes("btn_close")) {
        a.on("click", i, this);
      }
    }
  };

  e.prototype.destroyNativeAdNode = function () {
    if (cc.isValid(this.adNode)) {
      this.adNode.destroy();
      this.adNode = null;
    }
  };

  e.prototype.destroyAd = function () {
    this.destroyNativeAdNode();
    t.prototype.destroyAd.call(this);
  };

  e.prototype.setAdData = function (t, e, i) {
    if (cc.isValid(this.adNode)) {
      var o = this.adNode.getChildByName("content");

      if (t) {
        cc.loader.load({
          url: t,
          type: "png"
        }, function (t, e) {
          if (t) {
            console.error("img加载失败");
          } else {
            {
              var i = new cc.SpriteFrame(e);
              i ? o.getChildByName("ad_icon").getComponent(cc.Sprite).spriteFrame = i : console.error("img加载失败");
            }
          }
        });
      }

      var n = o.getChildByName("ad_title");

      if (cc.isValid(n) && e) {
        n.getComponent(cc.Label).string = e;
      }

      var s = o.getChildByName("ad_dest");

      if (cc.isValid(s) && i) {
        s.getComponent(cc.Label).string = e;
      }
    }
  };

  return e;
}(require("./BaseAd").BaseAd);

exports["default"] = r;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,