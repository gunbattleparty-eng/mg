
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/game_script/scripts/SkillListItem.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '9812a7/ebdBvJFp3JHLWdyQ', 'SkillListItem');
// game_script/scripts/SkillListItem.js

"use strict";

var o;

var $assetsLoader = require("./AssetsLoader");

var $assetsMap = require("./AssetsMap");

var $resUtil = require("./ResUtil");

var $eventManager = require("./EventManager");

var $popupManager = require("./PopupManager");

var $remoteAudio = require("./RemoteAudio");

var $configContext = require("./ConfigContext");

var $localEventName = require("./LocalEventName");

var $skillContext = require("./SkillContext");

var $startView = require("./StartView");

var y = cc._decorator;
var g = y.ccclass;
var _ = y.property;

var k = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    e.icon = null;
    e.resDot = null;
    e.levelLabel = null;
    e.maskNode = null;
    e.basicSkillId = 0;
    e.skillId = 0;
    return e;
  }

  __extends(e, t);

  e.prototype.start = function () {
    this.node.on(cc.Node.EventType.TOUCH_END, this.touchSkill, this);
  };

  e.prototype.render = function (t, e) {
    var i = this;
    var o = $configContext["default"].instance.skillConfigsMap.get(t.skillmaster_id);

    if (t.id !== this.basicSkillId) {
      $assetsLoader["default"].instance.loadRes($assetsMap.BundleNames.Public_Res, ["/skills/" + o.icon], cc.SpriteFrame, null, function (t, o) {
        var n = o[0];

        if (n && cc.isValid(i.icon)) {
          i.icon.spriteFrame = $resUtil.ResUtil.assignWith(n, e);
        }
      });
    }

    this.basicSkillId = t.id;
    this.skillId = o.id;
    var n = $skillContext["default"].Ins.getSKillLevel(this.skillId);
    n <= 0 ? (this.levelLabel.node.active = !1, this.maskNode.active = !0, this.maskNode.getComponentInChildren(cc.Label).string = "达到" + t.unclok_level + "级解锁") : (this.levelLabel.node.active = !0, this.maskNode.active = !1, this.levelLabel.string = "等级:" + n);
    this.resDot.active = $skillContext["default"].Ins.checkSkillUpgrade(this.skillId);
  };

  e.prototype.touchSkill = function () {
    if (!this.maskNode.active) {
      $remoteAudio["default"].instance.playEffectMusic("Click");
      $popupManager.PopupManager.instance.open($assetsMap.AssetsMap.PopUpBundles.prefabs.assetsList.SkillInfoView, {
        skillId: this.skillId
      });
      this.resDot.active = $skillContext["default"].Ins.checkSkillUpgrade(this.skillId);
      $eventManager["default"].send($localEventName["default"].RENDER_DOT, $startView.MenuType.Skill);
    }
  };

  __decorate([_(cc.Sprite)], e.prototype, "icon", void 0);

  __decorate([_(cc.Node)], e.prototype, "resDot", void 0);

  __decorate([_(cc.Label)], e.prototype, "levelLabel", void 0);

  __decorate([_(cc.Node)], e.prototype, "maskNode", void 0);

  return __decorate([g], e);
}(cc.Component);

exports["default"] = k;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcZ2FtZV9zY3JpcHRcXHNjcmlwdHNcXFNraWxsTGlzdEl0ZW0uanMiXSwibmFtZXMiOlsibyIsIiRhc3NldHNMb2FkZXIiLCJyZXF1aXJlIiwiJGFzc2V0c01hcCIsIiRyZXNVdGlsIiwiJGV2ZW50TWFuYWdlciIsIiRwb3B1cE1hbmFnZXIiLCIkcmVtb3RlQXVkaW8iLCIkY29uZmlnQ29udGV4dCIsIiRsb2NhbEV2ZW50TmFtZSIsIiRza2lsbENvbnRleHQiLCIkc3RhcnRWaWV3IiwieSIsImNjIiwiX2RlY29yYXRvciIsImciLCJjY2NsYXNzIiwiXyIsInByb3BlcnR5IiwiayIsInQiLCJlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJpY29uIiwicmVzRG90IiwibGV2ZWxMYWJlbCIsIm1hc2tOb2RlIiwiYmFzaWNTa2lsbElkIiwic2tpbGxJZCIsIl9fZXh0ZW5kcyIsInByb3RvdHlwZSIsInN0YXJ0Iiwibm9kZSIsIm9uIiwiTm9kZSIsIkV2ZW50VHlwZSIsIlRPVUNIX0VORCIsInRvdWNoU2tpbGwiLCJyZW5kZXIiLCJpIiwiaW5zdGFuY2UiLCJza2lsbENvbmZpZ3NNYXAiLCJnZXQiLCJza2lsbG1hc3Rlcl9pZCIsImlkIiwibG9hZFJlcyIsIkJ1bmRsZU5hbWVzIiwiUHVibGljX1JlcyIsIlNwcml0ZUZyYW1lIiwibiIsImlzVmFsaWQiLCJzcHJpdGVGcmFtZSIsIlJlc1V0aWwiLCJhc3NpZ25XaXRoIiwiSW5zIiwiZ2V0U0tpbGxMZXZlbCIsImFjdGl2ZSIsImdldENvbXBvbmVudEluQ2hpbGRyZW4iLCJMYWJlbCIsInN0cmluZyIsInVuY2xva19sZXZlbCIsImNoZWNrU2tpbGxVcGdyYWRlIiwicGxheUVmZmVjdE11c2ljIiwiUG9wdXBNYW5hZ2VyIiwib3BlbiIsIkFzc2V0c01hcCIsIlBvcFVwQnVuZGxlcyIsInByZWZhYnMiLCJhc3NldHNMaXN0IiwiU2tpbGxJbmZvVmlldyIsInNlbmQiLCJSRU5ERVJfRE9UIiwiTWVudVR5cGUi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SyxDQUE3QyxDQUFWOztFQUNBLE9BQU80QyxVQUFVLENBQUMsQ0FBQzVELENBQUQsQ0FBRCxFQUFNTSxDQUFOLENBQWpCO0FBQ0gsQ0E1RE8sQ0E0RExSLEVBQUUsQ0FBQ2dFLFNBNURFLENBQVI7O0FBNkRBQyxPQUFPLFdBQVAsR0FBa0IzRCxDQUFsQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG87XHJcbnZhciAkYXNzZXRzTG9hZGVyID0gcmVxdWlyZShcIi4vQXNzZXRzTG9hZGVyXCIpO1xyXG52YXIgJGFzc2V0c01hcCA9IHJlcXVpcmUoXCIuL0Fzc2V0c01hcFwiKTtcclxudmFyICRyZXNVdGlsID0gcmVxdWlyZShcIi4vUmVzVXRpbFwiKTtcclxudmFyICRldmVudE1hbmFnZXIgPSByZXF1aXJlKFwiLi9FdmVudE1hbmFnZXJcIik7XHJcbnZhciAkcG9wdXBNYW5hZ2VyID0gcmVxdWlyZShcIi4vUG9wdXBNYW5hZ2VyXCIpO1xyXG52YXIgJHJlbW90ZUF1ZGlvID0gcmVxdWlyZShcIi4vUmVtb3RlQXVkaW9cIik7XHJcbnZhciAkY29uZmlnQ29udGV4dCA9IHJlcXVpcmUoXCIuL0NvbmZpZ0NvbnRleHRcIik7XHJcbnZhciAkbG9jYWxFdmVudE5hbWUgPSByZXF1aXJlKFwiLi9Mb2NhbEV2ZW50TmFtZVwiKTtcclxudmFyICRza2lsbENvbnRleHQgPSByZXF1aXJlKFwiLi9Ta2lsbENvbnRleHRcIik7XHJcbnZhciAkc3RhcnRWaWV3ID0gcmVxdWlyZShcIi4vU3RhcnRWaWV3XCIpO1xyXG52YXIgeSA9IGNjLl9kZWNvcmF0b3I7XHJcbnZhciBnID0geS5jY2NsYXNzO1xyXG52YXIgXyA9IHkucHJvcGVydHk7XHJcbnZhciBrID0gKGZ1bmN0aW9uICh0KSB7XHJcbiAgICBmdW5jdGlvbiBlKCkge1xyXG4gICAgICAgIHZhciBlID0gKG51bGwgIT09IHQgJiYgdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpKSB8fCB0aGlzO1xyXG4gICAgICAgIGUuaWNvbiA9IG51bGw7XHJcbiAgICAgICAgZS5yZXNEb3QgPSBudWxsO1xyXG4gICAgICAgIGUubGV2ZWxMYWJlbCA9IG51bGw7XHJcbiAgICAgICAgZS5tYXNrTm9kZSA9IG51bGw7XHJcbiAgICAgICAgZS5iYXNpY1NraWxsSWQgPSAwO1xyXG4gICAgICAgIGUuc2tpbGxJZCA9IDA7XHJcbiAgICAgICAgcmV0dXJuIGU7XHJcbiAgICB9XHJcbiAgICBfX2V4dGVuZHMoZSwgdCk7XHJcbiAgICBlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLm5vZGUub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELCB0aGlzLnRvdWNoU2tpbGwsIHRoaXMpO1xyXG4gICAgfTtcclxuICAgIGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdmFyIGkgPSB0aGlzO1xyXG4gICAgICAgIHZhciBvID0gJGNvbmZpZ0NvbnRleHQuZGVmYXVsdC5pbnN0YW5jZS5za2lsbENvbmZpZ3NNYXAuZ2V0KHQuc2tpbGxtYXN0ZXJfaWQpO1xyXG4gICAgICAgIGlmICh0LmlkICE9PSB0aGlzLmJhc2ljU2tpbGxJZCkge1xyXG4gICAgICAgICAgICAkYXNzZXRzTG9hZGVyLmRlZmF1bHQuaW5zdGFuY2UubG9hZFJlcyhcclxuICAgICAgICAgICAgICAgICRhc3NldHNNYXAuQnVuZGxlTmFtZXMuUHVibGljX1JlcyxcclxuICAgICAgICAgICAgICAgIFtcIi9za2lsbHMvXCIgKyBvLmljb25dLFxyXG4gICAgICAgICAgICAgICAgY2MuU3ByaXRlRnJhbWUsXHJcbiAgICAgICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKHQsIG8pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IG9bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4gJiYgY2MuaXNWYWxpZChpLmljb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuaWNvbi5zcHJpdGVGcmFtZSA9ICRyZXNVdGlsLlJlc1V0aWwuYXNzaWduV2l0aChuLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYmFzaWNTa2lsbElkID0gdC5pZDtcclxuICAgICAgICB0aGlzLnNraWxsSWQgPSBvLmlkO1xyXG4gICAgICAgIHZhciBuID0gJHNraWxsQ29udGV4dC5kZWZhdWx0Lklucy5nZXRTS2lsbExldmVsKHRoaXMuc2tpbGxJZCk7XHJcbiAgICAgICAgbiA8PSAwXHJcbiAgICAgICAgICAgID8gKCh0aGlzLmxldmVsTGFiZWwubm9kZS5hY3RpdmUgPSAhMSksXHJcbiAgICAgICAgICAgICAgKHRoaXMubWFza05vZGUuYWN0aXZlID0gITApLFxyXG4gICAgICAgICAgICAgICh0aGlzLm1hc2tOb2RlLmdldENvbXBvbmVudEluQ2hpbGRyZW4oY2MuTGFiZWwpLnN0cmluZyA9IFwi6L6+5YiwXCIgKyB0LnVuY2xva19sZXZlbCArIFwi57qn6Kej6ZSBXCIpKVxyXG4gICAgICAgICAgICA6ICgodGhpcy5sZXZlbExhYmVsLm5vZGUuYWN0aXZlID0gITApLCAodGhpcy5tYXNrTm9kZS5hY3RpdmUgPSAhMSksICh0aGlzLmxldmVsTGFiZWwuc3RyaW5nID0gXCLnrYnnuqc6XCIgKyBuKSk7XHJcbiAgICAgICAgdGhpcy5yZXNEb3QuYWN0aXZlID0gJHNraWxsQ29udGV4dC5kZWZhdWx0Lklucy5jaGVja1NraWxsVXBncmFkZSh0aGlzLnNraWxsSWQpO1xyXG4gICAgfTtcclxuICAgIGUucHJvdG90eXBlLnRvdWNoU2tpbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLm1hc2tOb2RlLmFjdGl2ZSkge1xyXG4gICAgICAgICAgICAkcmVtb3RlQXVkaW8uZGVmYXVsdC5pbnN0YW5jZS5wbGF5RWZmZWN0TXVzaWMoXCJDbGlja1wiKTtcclxuICAgICAgICAgICAgJHBvcHVwTWFuYWdlci5Qb3B1cE1hbmFnZXIuaW5zdGFuY2Uub3BlbihcclxuICAgICAgICAgICAgICAgICRhc3NldHNNYXAuQXNzZXRzTWFwLlBvcFVwQnVuZGxlcy5wcmVmYWJzLmFzc2V0c0xpc3QuU2tpbGxJbmZvVmlldyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBza2lsbElkOiB0aGlzLnNraWxsSWRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNEb3QuYWN0aXZlID0gJHNraWxsQ29udGV4dC5kZWZhdWx0Lklucy5jaGVja1NraWxsVXBncmFkZSh0aGlzLnNraWxsSWQpO1xyXG4gICAgICAgICAgICAkZXZlbnRNYW5hZ2VyLmRlZmF1bHQuc2VuZCgkbG9jYWxFdmVudE5hbWUuZGVmYXVsdC5SRU5ERVJfRE9ULCAkc3RhcnRWaWV3Lk1lbnVUeXBlLlNraWxsKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgX19kZWNvcmF0ZShbXyhjYy5TcHJpdGUpXSwgZS5wcm90b3R5cGUsIFwiaWNvblwiLCB2b2lkIDApO1xyXG4gICAgX19kZWNvcmF0ZShbXyhjYy5Ob2RlKV0sIGUucHJvdG90eXBlLCBcInJlc0RvdFwiLCB2b2lkIDApO1xyXG4gICAgX19kZWNvcmF0ZShbXyhjYy5MYWJlbCldLCBlLnByb3RvdHlwZSwgXCJsZXZlbExhYmVsXCIsIHZvaWQgMCk7XHJcbiAgICBfX2RlY29yYXRlKFtfKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwibWFza05vZGVcIiwgdm9pZCAwKTtcclxuICAgIHJldHVybiBfX2RlY29yYXRlKFtnXSwgZSk7XHJcbn0pKGNjLkNvbXBvbmVudCk7XHJcbmV4cG9ydHMuZGVmYXVsdCA9IGs7XHJcbiJdfQ==