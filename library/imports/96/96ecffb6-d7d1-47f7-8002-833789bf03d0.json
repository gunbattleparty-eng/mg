{
  "__type__": "cc.TextAsset",
  "_name": "fly.d",
  "_objFlags": 0,
  "_native": "",
  "text": "interface FlyRequestConfig extends Object {\r\n    url?: string;\r\n    method?: string;\r\n    baseURL?: string;\r\n    headers?: any;\r\n    body?: any;\r\n    timeout?: number;\r\n    withCredentials?: boolean;\r\n    parseJson?: boolean;\r\n    responseType?: string;\r\n}\r\n\r\ninterface FlyError {\r\n    status: number;\r\n    message: string;\r\n    engine: XMLHttpRequest;\r\n    request?: FlyRequestConfig;\r\n    response?: FlyErrResponse;\r\n}\r\n\r\ninterface FlyResponse<T = any> {\r\n    data: T;\r\n    request: FlyRequestConfig;\r\n    engine: XMLHttpRequest;\r\n    headers: Object;\r\n}\r\n\r\ninterface FlyErrResponse {\r\n    data: any;\r\n    headers: Object;\r\n    status: number;\r\n    statusText: string;\r\n}\r\n\r\ninterface FlyPromise<T = any> extends Promise<FlyResponse<T>> {\r\n}\r\n\r\ninterface FlyRequestInterceptor<V> {\r\n    use(onSend?: (request: V) => any): void;\r\n    lock(): void;\r\n    unlock(): void;\r\n\r\n    clear(): void;\r\n}\r\ninterface FlyResponseInterceptor<V> {\r\n    use(onSucceed?: (response: V) => any, onError?: (err: FlyError) => any): void;\r\n    lock(): void;\r\n    unlock(): void;\r\n\r\n    clear(): void;\r\n}\r\n\r\ninterface Fly {\r\n    config: FlyRequestConfig;\r\n    interceptors: {\r\n        request: FlyRequestInterceptor<FlyRequestConfig>;\r\n        response:FlyResponseInterceptor<FlyResponse>;\r\n    };\r\n    engine:any;\r\n    request<T = any>(url: string, data?: any, config?: FlyRequestConfig): FlyPromise<T>;\r\n    get<T = any>(url: string, data?:any, config?: FlyRequestConfig): FlyPromise<T>;\r\n    delete(url: string, data?:any, config?: FlyRequestConfig): FlyPromise;\r\n    head(url: string,data?:any, config?: FlyRequestConfig): FlyPromise;\r\n    post<T = any>(url: string, data?: any, config?: FlyRequestConfig): FlyPromise<T>;\r\n    put<T = any>(url: string, data?: any, config?: FlyRequestConfig): FlyPromise<T>;\r\n    patch<T = any>(url: string, data?: any, config?: FlyRequestConfig): FlyPromise<T>;\r\n    all<T>(values: (T | Promise<T>)[]): Promise<T[]>;\r\n    spread<T, R>(callback: (...args: T[]) => R): (array: T[]) => R;\r\n\r\n    lock(): void;\r\n    unlock(): void;\r\n\r\n    clear(): void;\r\n}\r\ndeclare var fly:Fly;\r\n"
}