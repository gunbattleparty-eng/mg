
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/game_script/scripts/Base64.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ef71ci4rmlA2LEcWcWcJ/Xm', 'Base64');
// game_script/scripts/Base64.js

"use strict";

exports.Base64 = void 0;

var $wordArray = require("./WordArray");

var n = function () {
  function t() {}

  t.stringify = function (t) {
    t.clamp();
    var e = [];

    for (var i = 0; i < t.sigBytes; i += 3) {
      var o = (t.words[i >>> 2] >>> 24 - i % 4 * 8 & 255) << 16 | (t.words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255) << 8 | t.words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;

      for (var n = 0; n < 4 && i + 0.75 * n < t.sigBytes; n++) {
        e.push(this._map.charAt(o >>> 6 * (3 - n) & 63));
      }
    }

    var s = this._map.charAt(64);

    if (s) {
      for (; e.length % 4;) {
        e.push(s);
      }
    }

    return e.join("");
  };

  t.parse = function (t) {
    var e = t.length;

    if (void 0 === this._reverseMap) {
      this._reverseMap = [];

      for (var i = 0; i < this._map.length; i++) {
        this._reverseMap[this._map.charCodeAt(i)] = i;
      }
    }

    var o = this._map.charAt(64);

    if (o) {
      var n = t.indexOf(o);

      if (-1 !== n) {
        e = n;
      }
    }

    return this.parseLoop(t, e, this._reverseMap);
  };

  t.parseLoop = function (t, e, i) {
    var n = [];
    var s = 0;

    for (var r = 0; r < e; r++) {
      if (r % 4) {
        var a = i[t.charCodeAt(r - 1)] << r % 4 * 2;
        var l = i[t.charCodeAt(r)] >>> 6 - r % 4 * 2;
        n[s >>> 2] |= (a | l) << 24 - s % 4 * 8;
        s++;
      }
    }

    return new $wordArray.WordArray(n, s);
  };

  t._map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  t._reverseMap = void 0;
  return t;
}();

exports.Base64 = n;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcZ2FtZV9zY3JpcHRcXHNjcmlwdHNcXEJhc2U2NC5qcyJdLCJuYW1lcyI6WyJleHBvcnRzIiwiQmFzZTY0IiwiJHdvcmRBcnJheSIsInJlcXVpcmUiLCJuIiwidCIsInN0cmluZ2lmeSIsImNsYW1wIiwiZSIsImkiLCJzaWdCeXRlcyIsIm8iLCJ3b3JkcyIsInB1c2giLCJfbWFwIiwiY2hhckF0IiwicyIsImxlbmd0aCIsImpvaW4iLCJwYXJzZSIsIl9yZXZlcnNlTWFwIiwiY2hhckNvZGVBdCIsImluZGV4T2YiLCJwYXJzZUxvb3AiLCJyIiwiYSIsImwiLCJXb3JkQXJyYXkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUFBLE9BQU8sQ0FBQ0MsTUFBUixHQUFpQixLQUFLLENBQXRCOztBQUNBLElBQUlDLFVBQVUsR0FBR0MsT0FBTyxDQUFDLGFBQUQsQ0FBeEI7O0FBQ0EsSUFBSUMsQ0FBQyxHQUFJLFlBQVk7RUFDakIsU0FBU0MsQ0FBVCxHQUFhLENBQUU7O0VBQ2ZBLENBQUMsQ0FBQ0MsU0FBRixHQUFjLFVBQVVELENBQVYsRUFBYTtJQUN2QkEsQ0FBQyxDQUFDRSxLQUFGO0lBQ0EsSUFBSUMsQ0FBQyxHQUFHLEVBQVI7O0lBQ0EsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSixDQUFDLENBQUNLLFFBQXRCLEVBQWdDRCxDQUFDLElBQUksQ0FBckMsRUFBd0M7TUFDcEMsSUFBSUUsQ0FBQyxHQUNBLENBQUVOLENBQUMsQ0FBQ08sS0FBRixDQUFRSCxDQUFDLEtBQUssQ0FBZCxNQUFzQixLQUFNQSxDQUFDLEdBQUcsQ0FBTCxHQUFVLENBQXRDLEdBQTRDLEdBQTdDLEtBQXFELEVBQXRELEdBQ0MsQ0FBRUosQ0FBQyxDQUFDTyxLQUFGLENBQVNILENBQUMsR0FBRyxDQUFMLEtBQVksQ0FBcEIsTUFBNEIsS0FBTSxDQUFDQSxDQUFDLEdBQUcsQ0FBTCxJQUFVLENBQVgsR0FBZ0IsQ0FBbEQsR0FB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QUF6QztRQUNBQSxDQUFDO01BQ0o7SUFDSjs7SUFDRCxPQUFPLElBQUlkLFVBQVUsQ0FBQ3lCLFNBQWYsQ0FBeUJ2QixDQUF6QixFQUE0QlksQ0FBNUIsQ0FBUDtFQUNILENBWkQ7O0VBYUFYLENBQUMsQ0FBQ1MsSUFBRixHQUFTLG1FQUFUO0VBQ0FULENBQUMsQ0FBQ2UsV0FBRixHQUFnQixLQUFLLENBQXJCO0VBQ0EsT0FBT2YsQ0FBUDtBQUNILENBdkRPLEVBQVI7O0FBd0RBTCxPQUFPLENBQUNDLE1BQVIsR0FBaUJHLENBQWpCIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLkJhc2U2NCA9IHZvaWQgMDtcclxudmFyICR3b3JkQXJyYXkgPSByZXF1aXJlKFwiLi9Xb3JkQXJyYXlcIik7XHJcbnZhciBuID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIHQoKSB7fVxyXG4gICAgdC5zdHJpbmdpZnkgPSBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgIHQuY2xhbXAoKTtcclxuICAgICAgICB2YXIgZSA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdC5zaWdCeXRlczsgaSArPSAzKSB7XHJcbiAgICAgICAgICAgIHZhciBvID1cclxuICAgICAgICAgICAgICAgICgoKHQud29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAyNTUpIDw8IDE2KSB8XHJcbiAgICAgICAgICAgICAgICAoKCh0LndvcmRzWyhpICsgMSkgPj4+IDJdID4+PiAoMjQgLSAoKGkgKyAxKSAlIDQpICogOCkpICYgMjU1KSA8PCA4KSB8XHJcbiAgICAgICAgICAgICAgICAoKHQud29yZHNbKGkgKyAyKSA+Pj4gMl0gPj4+ICgyNCAtICgoaSArIDIpICUgNCkgKiA4KSkgJiAyNTUpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBuID0gMDsgbiA8IDQgJiYgaSArIDAuNzUgKiBuIDwgdC5zaWdCeXRlczsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICBlLnB1c2godGhpcy5fbWFwLmNoYXJBdCgobyA+Pj4gKDYgKiAoMyAtIG4pKSkgJiA2MykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBzID0gdGhpcy5fbWFwLmNoYXJBdCg2NCk7XHJcbiAgICAgICAgaWYgKHMpIHtcclxuICAgICAgICAgICAgZm9yICg7IGUubGVuZ3RoICUgNDsgKSB7XHJcbiAgICAgICAgICAgICAgICBlLnB1c2gocyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGUuam9pbihcIlwiKTtcclxuICAgIH07XHJcbiAgICB0LnBhcnNlID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICB2YXIgZSA9IHQubGVuZ3RoO1xyXG4gICAgICAgIGlmICh2b2lkIDAgPT09IHRoaXMuX3JldmVyc2VNYXApIHtcclxuICAgICAgICAgICAgdGhpcy5fcmV2ZXJzZU1hcCA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX21hcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmV2ZXJzZU1hcFt0aGlzLl9tYXAuY2hhckNvZGVBdChpKV0gPSBpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvID0gdGhpcy5fbWFwLmNoYXJBdCg2NCk7XHJcbiAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgdmFyIG4gPSB0LmluZGV4T2Yobyk7XHJcbiAgICAgICAgICAgIGlmICgtMSAhPT0gbikge1xyXG4gICAgICAgICAgICAgICAgZSA9IG47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VMb29wKHQsIGUsIHRoaXMuX3JldmVyc2VNYXApO1xyXG4gICAgfTtcclxuICAgIHQucGFyc2VMb29wID0gZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IFtdO1xyXG4gICAgICAgIHZhciBzID0gMDtcclxuICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IGU7IHIrKykge1xyXG4gICAgICAgICAgICBpZiAociAlIDQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhID0gaVt0LmNoYXJDb2RlQXQociAtIDEpXSA8PCAoKHIgJSA0KSAqIDIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGwgPSBpW3QuY2hhckNvZGVBdChyKV0gPj4+ICg2IC0gKHIgJSA0KSAqIDIpO1xyXG4gICAgICAgICAgICAgICAgbltzID4+PiAyXSB8PSAoYSB8IGwpIDw8ICgyNCAtIChzICUgNCkgKiA4KTtcclxuICAgICAgICAgICAgICAgIHMrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3ICR3b3JkQXJyYXkuV29yZEFycmF5KG4sIHMpO1xyXG4gICAgfTtcclxuICAgIHQuX21hcCA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIjtcclxuICAgIHQuX3JldmVyc2VNYXAgPSB2b2lkIDA7XHJcbiAgICByZXR1cm4gdDtcclxufSkoKTtcclxuZXhwb3J0cy5CYXNlNjQgPSBuO1xyXG4iXX0=