
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/game_script/scripts/EggRewardView.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd24702AQsBPc6cQK41VRnMB', 'EggRewardView');
// game_script/scripts/EggRewardView.js

"use strict";

var o;

var $assetsLoader = require("./AssetsLoader");

var $assetsMap = require("./AssetsMap");

var $resUtil = require("./ResUtil");

var $list = require("./List");

var $popupView = require("./PopupView");

var $platform = require("./Platform");

var $seedUtil = require("./SeedUtil");

var $aD = require("./AD");

var $adService = require("./AdService");

var $configContext = require("./ConfigContext");

var $skillContext = require("./SkillContext");

var $userDataContext = require("./UserDataContext");

var _ = cc._decorator;
var k = _.ccclass;
var v = _.property;

var b = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    e.list = null;
    e.adBtn = null;
    e.rewardList = [];
    return e;
  }

  __extends(e, t);

  e.prototype.onResetView = function () {
    this.caculateReward();
    this.list.numItems = this.rewardList.length;
  };

  e.prototype.addEvent = function () {
    this.adBtn.on("click", this.clickAd, this);
  };

  e.prototype.removeEvent = function () {
    this.adBtn.off("click", this.clickAd, this);
  };

  e.prototype.renderItem = function (t, e) {
    var i = this;
    var o = this.rewardList[e];

    if (1 === o.type) {
      $assetsLoader["default"].instance.loadRes($assetsMap.BundleNames.Public, ["/textures/gem/jinbi"], cc.SpriteFrame, null, function (e, n) {
        var s = n[0];

        if (s && cc.isValid(t)) {
          t.children[0].getComponent(cc.Sprite).spriteFrame = null;
          t.children[1].getComponent(cc.Sprite).spriteFrame = $resUtil.ResUtil.assignWith(s, i.node);
          t.children[2].getComponent(cc.Label).string = o.num.toString();
        }
      });
    } else {
      if (2 === o.type) {
        $assetsLoader["default"].instance.loadRes($assetsMap.BundleNames.Public, ["/textures/gem/exp"], cc.SpriteFrame, null, function (e, n) {
          var s = n[0];

          if (s && cc.isValid(t)) {
            t.children[0].getComponent(cc.Sprite).spriteFrame = null;
            t.children[1].getComponent(cc.Sprite).spriteFrame = $resUtil.ResUtil.assignWith(s, i.node);
            t.children[2].getComponent(cc.Label).string = o.num.toString();
          }
        });
      } else {
        if (3 === o.type) {
          $assetsLoader["default"].instance.loadRes($assetsMap.BundleNames.Public_Res, ["/equipment_icon/zb" + o.ext], cc.SpriteFrame, null, function (e, n) {
            var s = n[0];

            if (s && cc.isValid(t)) {
              t.children[0].getComponent(cc.Sprite).spriteFrame = null;
              t.children[1].getComponent(cc.Sprite).spriteFrame = $resUtil.ResUtil.assignWith(s, i.node);
              t.children[2].getComponent(cc.Label).string = o.num.toString();
            }
          });
        } else {
          if (4 === o.type) {
            var n = $configContext["default"].instance.skillConfigs.find(function (t) {
              return t.id === o.ext;
            });
            $assetsLoader["default"].instance.loadRes($assetsMap.BundleNames.Public_Res, ["/skill_book/" + n.icon], cc.SpriteFrame, null, function (e, n) {
              var s = n[0];

              if (s && cc.isValid(t)) {
                t.children[0].getComponent(cc.Sprite).spriteFrame = null;
                t.children[1].getComponent(cc.Sprite).spriteFrame = $resUtil.ResUtil.assignWith(s, i.node);
                t.children[2].getComponent(cc.Label).string = o.num.toString();
              }
            });
          } else {
            if (6 === o.type) {
              $assetsLoader["default"].instance.loadRes($assetsMap.BundleNames.Public, ["/textures/gem/zuanshi"], cc.SpriteFrame, null, function (e, n) {
                var s = n[0];

                if (s && cc.isValid(t)) {
                  t.children[1].getComponent(cc.Sprite).spriteFrame = $resUtil.ResUtil.assignWith(s, i.node);
                  t.children[2].getComponent(cc.Label).string = o.num.toString();
                }
              });
            }
          }
        }
      }
    }
  };

  e.prototype.caculateReward = function () {
    this.rewardList.push({
      type: 1,
      num: 3e3
    });
    this.rewardList.push({
      type: 2,
      num: 100
    });
    this.rewardList.push({
      type: 6,
      num: 400
    });
    var t = $seedUtil["default"].randomFrom(1, 4);
    var e = $seedUtil["default"].randomCount(1, 6, t);
    var i = $seedUtil["default"].splitNumber(30, t);

    for (var o = 0; o < t; o++) {
      this.rewardList.push({
        type: 3,
        ext: e[o],
        num: i[o]
      });
    }

    var n = $seedUtil["default"].randomFrom(1, 4);
    var s = $skillContext["default"].Ins.getUseSkillIds();
    n = Math.min(s.length, n);
    s = $seedUtil["default"].randomArr(s, n);
    var r = $seedUtil["default"].splitNumber(100, n);

    for (o = 0; o < n; o++) {
      this.rewardList.push({
        type: 4,
        ext: s[o],
        num: r[o]
      });
    }
  };

  e.prototype.clickAd = function () {
    var e = this;
    $adService["default"].Ins.showRewardedVideo(function () {
      if ($platform.Platform.currPlatForm === $platform.PlatformEnum.TOU_TIAO) {
        $aD["default"].toutiao.report("Egg_Benefits");
      }

      for (var i = 0; i < e.rewardList.length; i++) {
        var o = e.rewardList[i];
        1 === o.type ? $userDataContext["default"].Ins.opearCoin(o.num) : 2 === o.type ? $userDataContext["default"].Ins.addExp(o.num) : 3 === o.type ? $userDataContext["default"].Ins.opearEquipBook(o.ext, o.num) : 4 === o.type ? $userDataContext["default"].Ins.opearSkillBook(o.ext, o.num) : 6 === o.type && $userDataContext["default"].Ins.opearDiamond(o.num);
      }

      $userDataContext["default"].Ins.setEgg(6, 1);
      t.prototype.onClickClose.call(e);
    });
  };

  __decorate([v($list["default"])], e.prototype, "list", void 0);

  __decorate([v(cc.Node)], e.prototype, "adBtn", void 0);

  return __decorate([k], e);
}($popupView.PopupView);

exports["default"] = b;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcZ2FtZV9zY3JpcHRcXHNjcmlwdHNcXEVnZ1Jld2FyZFZpZXcuanMiXSwibmFtZXMiOlsibyIsIiRhc3NldHNMb2FkZXIiLCJyZXF1aXJlIiwiJGFzc2V0c01hcCIsIiRyZXNVdGlsIiwiJGxpc3QiLCIkcG9wdXBWaWV3IiwiJHBsYXRmb3JtIiwiJHNlZWRVdGlsIiwiJGFEIiwiJGFkU2VydmljZSIsIiRjb25maWdDb250ZXh0IiwiJHNraWxsQ29udGV4dCIsIiR1c2VyRGF0YUNvbnRleHQiLCJfIiwiY2MiLCJfZGVjb3JhdG9yIiwiayIsImNjY2xhc3MiLCJ2IiwicHJvcGVydHkiLCJiIiwidCIsImUiLCJhcHBseSIsImFyZ3VtZW50cyIsImxpc3QiLCJhZEJ0biIsInJld2FyZExpc3QiLCJfX2V4dGVuZHMiLCJwcm90b3R5cGUiLCJvblJlc2V0VmlldyIsImNhY3VsYXRlUmV3YXJkIiwibnVtSXRlbXMiLCJsZW5ndGgiLCJhZGRFdmVudCIsIm9uIiwiY2xpY2tBZCIsInJlbW92ZUV2ZW50Iiwib2ZmIiwicmVuZGVySXRlbSIsImkiLCJ0eXBlIiwiaW5zdGFuY2UiLCJsb2FkUmVzIiwiQnVuZGxlTmFtZXMiLCJQdWJsaWMiLCJTcHJpdGVGcmFtZSIsIm4iLCJzIiwiaXNWYWxpZCIsImNoaWxkcmVuIiwiZ2V0Q29tcG9uZW50IiwiU3ByaXRlIiwic3ByaXRlRnJhbWUiLCJSZXNVdGlsIiwiYXNzaWduV2l0aCIsIm5vZGUiLCJMYWJlbCIsInN0cmluZyIsIm51bSIsInRvU3RyaW5nIiwiUHVibGljX1JlcyIsImV4dCIsInNraWxsQ29uZmlncyIsImZpbmQiLCJpZCIsImljb24iLCJwdXNoIiwicmFuZG9tRnJvbSIsInJhbmRvbUNvdW50Iiwic3BsaXROdW1iZXIiLCJJbnMiLCJnZXRVc2VTa2lsbElkcyIsIk1hdGgiLCJtaW4iLCJyYW5kb21BcnIiLCJyIiwic2hvd1Jld2FyZGVkVmlkZW8iLCJQbGF0Zm9ybSIsImN1cnJQbGF0Rm9ybSIsIlBsYXRmb3JtRW51bSIsIlRPVV9USUFPIiwidG91dGlhbyIsInJlcG9ydCIsIm9wZWFyQ29pbiIsImFkZEV4cCIsIm9wZWFyRXF1aXBCb29rIiwib3BlYXJTa2lsbEJvb2siLCJvcGVhckRpYW1vbmQiLCJzZXRFZ2ciLCJvbkNsaWNrQ2xvc2UiLCJjYWxsIiwiX19kZWNvcmF0ZSIsIk5vZGUiLCJQb3B1cFZpZXciLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLENBQUo7O0FBQ0EsSUFBSUMsYUFBYSxHQUFHQyxPQUFPLENBQUMsZ0JBQUQsQ0FBM0I7O0FBQ0EsSUFBSUMsVUFBVSxHQUFHRCxPQUFPLENBQUMsYUFBRCxDQUF4Qjs7QUFDQSxJQUFJRSxRQUFRLEdBQUdGLE9BQU8sQ0FBQyxXQUFELENBQXRCOztBQUNBLElBQUlHLEtBQUssR0FBR0gsT0FBTyxDQUFDLFFBQUQsQ0FBbkI7O0FBQ0EsSUFBSUksVUFBVSxHQUFHSixPQUFPLENBQUMsYUFBRCxDQUF4Qjs7QUFDQSxJQUFJSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxZQUFELENBQXZCOztBQUNBLElBQUlNLFNBQVMsR0FBR04sT0FBTyxDQUFDLFlBQUQsQ0FBdkI7O0FBQ0EsSUFBSU8sR0FBRyxHQUFHUCxPQUFPLENBQUMsTUFBRCxDQUFqQjs7QUFDQSxJQUFJUSxVQUFVLEdBQUdSLE9BQU8sQ0FBQyxhQUFELENBQXhCOztBQUNBLElBQUlTLGNBQWMsR0FBR1QsT0FBTyxDQUFDLGlCQUFELENBQTVCOztBQUNBLElBQUlVLGFBQWEsR0FBR1YsT0FBTyxDQUFDLGdCQUFELENBQTNCOztBQUNBLElBQUlXLGdCQUFnQixHQUFHWCxPQUFPLENBQUMsbUJBQUQsQ0FBOUI7O0FBQ0EsSUFBSVksQ0FBQyxHQUFHQyxFQUFFLENBQUNDLFVBQVg7QUFDQSxJQUFJQyxDQUFDLEdBQUdILENBQUMsQ0FBQ0ksT0FBVjtBQUNBLElBQUlDLENBQUMsR0FBR0wsQ0FBQyxDQUFDTSxRQUFWOztBQUNBLElBQUlDLENBQUMsR0FB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QUF6QixDQUE4QnJFLENBQTlCO0lBQ0gsQ0FsQkQ7RUFtQkgsQ0FyQkQ7O0VBc0JBc0UsVUFBVSxDQUFDLENBQUMxRSxDQUFDLENBQUNkLEtBQUssV0FBTixDQUFGLENBQUQsRUFBcUJrQixDQUFDLENBQUNPLFNBQXZCLEVBQWtDLE1BQWxDLEVBQTBDLEtBQUssQ0FBL0MsQ0FBVjs7RUFDQStELFVBQVUsQ0FBQyxDQUFDMUUsQ0FBQyxDQUFDSixFQUFFLENBQUMrRSxJQUFKLENBQUYsQ0FBRCxFQUFldkUsQ0FBQyxDQUFDTyxTQUFqQixFQUE0QixPQUE1QixFQUFxQyxLQUFLLENBQTFDLENBQVY7O0VBQ0EsT0FBTytELFVBQVUsQ0FBQyxDQUFDNUUsQ0FBRCxDQUFELEVBQU1NLENBQU4sQ0FBakI7QUFDSCxDQW5MTyxDQW1MTGpCLFVBQVUsQ0FBQ3lGLFNBbkxOLENBQVI7O0FBb0xBQyxPQUFPLFdBQVAsR0FBa0IzRSxDQUFsQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG87XHJcbnZhciAkYXNzZXRzTG9hZGVyID0gcmVxdWlyZShcIi4vQXNzZXRzTG9hZGVyXCIpO1xyXG52YXIgJGFzc2V0c01hcCA9IHJlcXVpcmUoXCIuL0Fzc2V0c01hcFwiKTtcclxudmFyICRyZXNVdGlsID0gcmVxdWlyZShcIi4vUmVzVXRpbFwiKTtcclxudmFyICRsaXN0ID0gcmVxdWlyZShcIi4vTGlzdFwiKTtcclxudmFyICRwb3B1cFZpZXcgPSByZXF1aXJlKFwiLi9Qb3B1cFZpZXdcIik7XHJcbnZhciAkcGxhdGZvcm0gPSByZXF1aXJlKFwiLi9QbGF0Zm9ybVwiKTtcclxudmFyICRzZWVkVXRpbCA9IHJlcXVpcmUoXCIuL1NlZWRVdGlsXCIpO1xyXG52YXIgJGFEID0gcmVxdWlyZShcIi4vQURcIik7XHJcbnZhciAkYWRTZXJ2aWNlID0gcmVxdWlyZShcIi4vQWRTZXJ2aWNlXCIpO1xyXG52YXIgJGNvbmZpZ0NvbnRleHQgPSByZXF1aXJlKFwiLi9Db25maWdDb250ZXh0XCIpO1xyXG52YXIgJHNraWxsQ29udGV4dCA9IHJlcXVpcmUoXCIuL1NraWxsQ29udGV4dFwiKTtcclxudmFyICR1c2VyRGF0YUNvbnRleHQgPSByZXF1aXJlKFwiLi9Vc2VyRGF0YUNvbnRleHRcIik7XHJcbnZhciBfID0gY2MuX2RlY29yYXRvcjtcclxudmFyIGsgPSBfLmNjY2xhc3M7XHJcbnZhciB2ID0gXy5wcm9wZXJ0eTtcclxudmFyIGIgPSAoZnVuY3Rpb24gKHQpIHtcclxuICAgIGZ1bmN0aW9uIGUoKSB7XHJcbiAgICAgICAgdmFyIGUgPSAobnVsbCAhPT0gdCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHx8IHRoaXM7XHJcbiAgICAgICAgZS5saXN0ID0gbnVsbDtcclxuICAgICAgICBlLmFkQnRuID0gbnVsbDtcclxuICAgICAgICBlLnJld2FyZExpc3QgPSBbXTtcclxuICAgICAgICByZXR1cm4gZTtcclxuICAgIH1cclxuICAgIF9fZXh0ZW5kcyhlLCB0KTtcclxuICAgIGUucHJvdG90eXBlLm9uUmVzZXRWaWV3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuY2FjdWxhdGVSZXdhcmQoKTtcclxuICAgICAgICB0aGlzLmxpc3QubnVtSXRlbXMgPSB0aGlzLnJld2FyZExpc3QubGVuZ3RoO1xyXG4gICAgfTtcclxuICAgIGUucHJvdG90eXBlLmFkZEV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuYWRCdG4ub24oXCJjbGlja1wiLCB0aGlzLmNsaWNrQWQsIHRoaXMpO1xyXG4gICAgfTtcclxuICAgIGUucHJvdG90eXBlLnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuYWRCdG4ub2ZmKFwiY2xpY2tcIiwgdGhpcy5jbGlja0FkLCB0aGlzKTtcclxuICAgIH07XHJcbiAgICBlLnByb3RvdHlwZS5yZW5kZXJJdGVtID0gZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB2YXIgaSA9IHRoaXM7XHJcbiAgICAgICAgdmFyIG8gPSB0aGlzLnJld2FyZExpc3RbZV07XHJcbiAgICAgICAgaWYgKDEgPT09IG8udHlwZSkge1xyXG4gICAgICAgICAgICAkYXNzZXRzTG9hZGVyLmRlZmF1bHQuaW5zdGFuY2UubG9hZFJlcyhcclxuICAgICAgICAgICAgICAgICRhc3NldHNNYXAuQnVuZGxlTmFtZXMuUHVibGljLFxyXG4gICAgICAgICAgICAgICAgW1wiL3RleHR1cmVzL2dlbS9qaW5iaVwiXSxcclxuICAgICAgICAgICAgICAgIGNjLlNwcml0ZUZyYW1lLFxyXG4gICAgICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlLCBuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBuWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzICYmIGNjLmlzVmFsaWQodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5jaGlsZHJlblswXS5nZXRDb21wb25lbnQoY2MuU3ByaXRlKS5zcHJpdGVGcmFtZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuY2hpbGRyZW5bMV0uZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSkuc3ByaXRlRnJhbWUgPSAkcmVzVXRpbC5SZXNVdGlsLmFzc2lnbldpdGgocywgaS5ub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5jaGlsZHJlblsyXS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyA9IG8ubnVtLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICgyID09PSBvLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICRhc3NldHNMb2FkZXIuZGVmYXVsdC5pbnN0YW5jZS5sb2FkUmVzKFxyXG4gICAgICAgICAgICAgICAgICAgICRhc3NldHNNYXAuQnVuZGxlTmFtZXMuUHVibGljLFxyXG4gICAgICAgICAgICAgICAgICAgIFtcIi90ZXh0dXJlcy9nZW0vZXhwXCJdLFxyXG4gICAgICAgICAgICAgICAgICAgIGNjLlNwcml0ZUZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGUsIG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBuWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocyAmJiBjYy5pc1ZhbGlkKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmNoaWxkcmVuWzBdLmdldENvbXBvbmVudChjYy5TcHJpdGUpLnNwcml0ZUZyYW1lID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuY2hpbGRyZW5bMV0uZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSkuc3ByaXRlRnJhbWUgPSAkcmVzVXRpbC5SZXNVdGlsLmFzc2lnbldpdGgocywgaS5ub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuY2hpbGRyZW5bMl0uZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSBvLm51bS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICgzID09PSBvLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkYXNzZXRzTG9hZGVyLmRlZmF1bHQuaW5zdGFuY2UubG9hZFJlcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGFzc2V0c01hcC5CdW5kbGVOYW1lcy5QdWJsaWNfUmVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBbXCIvZXF1aXBtZW50X2ljb24vemJcIiArIG8uZXh0XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2MuU3ByaXRlRnJhbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlLCBuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IG5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocyAmJiBjYy5pc1ZhbGlkKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5jaGlsZHJlblswXS5nZXRDb21wb25lbnQoY2MuU3ByaXRlKS5zcHJpdGVGcmFtZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5jaGlsZHJlblsxXS5nZXRDb21wb25lbnQoY2MuU3ByaXRlKS5zcHJpdGVGcmFtZSA9ICRyZXNVdGlsLlJlc1V0aWwuYXNzaWduV2l0aChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5ub2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmNoaWxkcmVuWzJdLmdldENvbXBvbmVudChjYy5MYWJlbCkuc3RyaW5nID0gby5udW0udG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICg0ID09PSBvLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSAkY29uZmlnQ29udGV4dC5kZWZhdWx0Lmluc3RhbmNlLnNraWxsQ29uZmlncy5maW5kKGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5pZCA9PT0gby5leHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkYXNzZXRzTG9hZGVyLmRlZmF1bHQuaW5zdGFuY2UubG9hZFJlcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRhc3NldHNNYXAuQnVuZGxlTmFtZXMuUHVibGljX1JlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtcIi9za2lsbF9ib29rL1wiICsgbi5pY29uXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNjLlNwcml0ZUZyYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChlLCBuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSBuWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzICYmIGNjLmlzVmFsaWQodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5jaGlsZHJlblswXS5nZXRDb21wb25lbnQoY2MuU3ByaXRlKS5zcHJpdGVGcmFtZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuY2hpbGRyZW5bMV0uZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSkuc3ByaXRlRnJhbWUgPSAkcmVzVXRpbC5SZXNVdGlsLmFzc2lnbldpdGgoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5ub2RlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuY2hpbGRyZW5bMl0uZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSBvLm51bS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoNiA9PT0gby50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXNzZXRzTG9hZGVyLmRlZmF1bHQuaW5zdGFuY2UubG9hZFJlcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkYXNzZXRzTWFwLkJ1bmRsZU5hbWVzLlB1YmxpYyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXCIvdGV4dHVyZXMvZ2VtL3p1YW5zaGlcIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2MuU3ByaXRlRnJhbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZSwgbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcyA9IG5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzICYmIGNjLmlzVmFsaWQodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuY2hpbGRyZW5bMV0uZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSkuc3ByaXRlRnJhbWUgPSAkcmVzVXRpbC5SZXNVdGlsLmFzc2lnbldpdGgoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm5vZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmNoaWxkcmVuWzJdLmdldENvbXBvbmVudChjYy5MYWJlbCkuc3RyaW5nID0gby5udW0udG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZS5wcm90b3R5cGUuY2FjdWxhdGVSZXdhcmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5yZXdhcmRMaXN0LnB1c2goe1xyXG4gICAgICAgICAgICB0eXBlOiAxLFxyXG4gICAgICAgICAgICBudW06IDNlM1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucmV3YXJkTGlzdC5wdXNoKHtcclxuICAgICAgICAgICAgdHlwZTogMixcclxuICAgICAgICAgICAgbnVtOiAxMDBcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnJld2FyZExpc3QucHVzaCh7XHJcbiAgICAgICAgICAgIHR5cGU6IDYsXHJcbiAgICAgICAgICAgIG51bTogNDAwXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIHQgPSAkc2VlZFV0aWwuZGVmYXVsdC5yYW5kb21Gcm9tKDEsIDQpO1xyXG4gICAgICAgIHZhciBlID0gJHNlZWRVdGlsLmRlZmF1bHQucmFuZG9tQ291bnQoMSwgNiwgdCk7XHJcbiAgICAgICAgdmFyIGkgPSAkc2VlZFV0aWwuZGVmYXVsdC5zcGxpdE51bWJlcigzMCwgdCk7XHJcbiAgICAgICAgZm9yICh2YXIgbyA9IDA7IG8gPCB0OyBvKyspIHtcclxuICAgICAgICAgICAgdGhpcy5yZXdhcmRMaXN0LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgdHlwZTogMyxcclxuICAgICAgICAgICAgICAgIGV4dDogZVtvXSxcclxuICAgICAgICAgICAgICAgIG51bTogaVtvXVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG4gPSAkc2VlZFV0aWwuZGVmYXVsdC5yYW5kb21Gcm9tKDEsIDQpO1xyXG4gICAgICAgIHZhciBzID0gJHNraWxsQ29udGV4dC5kZWZhdWx0Lklucy5nZXRVc2VTa2lsbElkcygpO1xyXG4gICAgICAgIG4gPSBNYXRoLm1pbihzLmxlbmd0aCwgbik7XHJcbiAgICAgICAgcyA9ICRzZWVkVXRpbC5kZWZhdWx0LnJhbmRvbUFycihzLCBuKTtcclxuICAgICAgICB2YXIgciA9ICRzZWVkVXRpbC5kZWZhdWx0LnNwbGl0TnVtYmVyKDEwMCwgbik7XHJcbiAgICAgICAgZm9yIChvID0gMDsgbyA8IG47IG8rKykge1xyXG4gICAgICAgICAgICB0aGlzLnJld2FyZExpc3QucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiA0LFxyXG4gICAgICAgICAgICAgICAgZXh0OiBzW29dLFxyXG4gICAgICAgICAgICAgICAgbnVtOiByW29dXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBlLnByb3RvdHlwZS5jbGlja0FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBlID0gdGhpcztcclxuICAgICAgICAkYWRTZXJ2aWNlLmRlZmF1bHQuSW5zLnNob3dSZXdhcmRlZFZpZGVvKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCRwbGF0Zm9ybS5QbGF0Zm9ybS5jdXJyUGxhdEZvcm0gPT09ICRwbGF0Zm9ybS5QbGF0Zm9ybUVudW0uVE9VX1RJQU8pIHtcclxuICAgICAgICAgICAgICAgICRhRC5kZWZhdWx0LnRvdXRpYW8ucmVwb3J0KFwiRWdnX0JlbmVmaXRzXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZS5yZXdhcmRMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbyA9IGUucmV3YXJkTGlzdFtpXTtcclxuICAgICAgICAgICAgICAgIDEgPT09IG8udHlwZVxyXG4gICAgICAgICAgICAgICAgICAgID8gJHVzZXJEYXRhQ29udGV4dC5kZWZhdWx0Lklucy5vcGVhckNvaW4oby5udW0pXHJcbiAgICAgICAgICAgICAgICAgICAgOiAyID09PSBvLnR5cGVcclxuICAgICAgICAgICAgICAgICAgICA/ICR1c2VyRGF0YUNvbnRleHQuZGVmYXVsdC5JbnMuYWRkRXhwKG8ubnVtKVxyXG4gICAgICAgICAgICAgICAgICAgIDogMyA9PT0gby50eXBlXHJcbiAgICAgICAgICAgICAgICAgICAgPyAkdXNlckRhdGFDb250ZXh0LmRlZmF1bHQuSW5zLm9wZWFyRXF1aXBCb29rKG8uZXh0LCBvLm51bSlcclxuICAgICAgICAgICAgICAgICAgICA6IDQgPT09IG8udHlwZVxyXG4gICAgICAgICAgICAgICAgICAgID8gJHVzZXJEYXRhQ29udGV4dC5kZWZhdWx0Lklucy5vcGVhclNraWxsQm9vayhvLmV4dCwgby5udW0pXHJcbiAgICAgICAgICAgICAgICAgICAgOiA2ID09PSBvLnR5cGUgJiYgJHVzZXJEYXRhQ29udGV4dC5kZWZhdWx0Lklucy5vcGVhckRpYW1vbmQoby5udW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICR1c2VyRGF0YUNvbnRleHQuZGVmYXVsdC5JbnMuc2V0RWdnKDYsIDEpO1xyXG4gICAgICAgICAgICB0LnByb3RvdHlwZS5vbkNsaWNrQ2xvc2UuY2FsbChlKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBfX2RlY29yYXRlKFt2KCRsaXN0LmRlZmF1bHQpXSwgZS5wcm90b3R5cGUsIFwibGlzdFwiLCB2b2lkIDApO1xyXG4gICAgX19kZWNvcmF0ZShbdihjYy5Ob2RlKV0sIGUucHJvdG90eXBlLCBcImFkQnRuXCIsIHZvaWQgMCk7XHJcbiAgICByZXR1cm4gX19kZWNvcmF0ZShba10sIGUpO1xyXG59KSgkcG9wdXBWaWV3LlBvcHVwVmlldyk7XHJcbmV4cG9ydHMuZGVmYXVsdCA9IGI7XHJcbiJdfQ==