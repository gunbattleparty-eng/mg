CCEffect %{
  techniques: 
    - 
      passes: 
        - 
          blendState: 
            targets: 
              - 
                blend: true
          rasterizerState: 
            cullMode: 0
          properties: 
            texture: 
              value: "white"
            alphaThreshold: 
              value: 
                - 0.5
            width: 
              value: 
                - 0.1
              editor: 
                tooltip: "光泽宽度"
            strength: 
              value: 
                - 1.2
              editor: 
                tooltip: "光泽强度"
            rtime: 
              value: 
                - 1.2
              editor: 
                tooltip: "运行时间"
            speedScale: 
              value: 
                - 1
              editor: 
                tooltip: "速度系数"
          vert: "vs"
          frag: "fs"

    }%
    
    CCProgram vs %{
        
precision highp float;
#include <cc-global>

#include <cc-local>

in vec3 a_position;
in vec4 a_color;
out vec4 v_color;
#if USE_TEXTURE
in vec2 a_uv0;
out vec2 v_uv0;
#endif
void main () {
  vec4 pos = vec4(a_position, 1);
  #if CC_USE_MODEL
  pos = cc_matViewProj * cc_matWorld * pos;
  #else
  pos = cc_matViewProj * pos;
  #endif
  #if USE_TEXTURE
  v_uv0 = a_uv0;
  #endif
  v_color = a_color;
  gl_Position = pos;
}
    }%
    
    CCProgram fs %{
        
precision highp float;
#if USE_ALPHA_TEST
  uniform ALPHA_TEST {
    float alphaThreshold;
  };
#endif
void ALPHA_TEST (in vec4 color) {
  #if USE_ALPHA_TEST
      if (color.a < alphaThreshold) discard;
  #endif
}
void ALPHA_TEST (in float alpha) {
  #if USE_ALPHA_TEST
      if (alpha < alphaThreshold) discard;
  #endif
}
in vec4 v_color;
#if USE_TEXTURE
in vec2 v_uv0;
uniform sampler2D texture;
#endif
uniform ARGS{
  float width;
  float strength;
  float speedScale;
  float rtime;
};
void main () {
  vec4 o = vec4(1, 1, 1, 1);
  #if USE_TEXTURE
  vec4 texture_tmp = texture(texture, v_uv0);
  #if CC_USE_ALPHA_ATLAS_texture
      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;
  #endif
  #if INPUT_IS_GAMMA
    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);
    o.a *= texture_tmp.a;
  #else
    o *= texture_tmp;
  #endif
  #endif
  o *= v_color;
  float time = rtime * speedScale;
  float k = 0.2;
  float time_step = -width;
  time_step += mod(time, 1.0 + 2.0 * width);
  if (v_uv0.x >= -v_uv0.y * k + time_step && v_uv0.x <= -v_uv0.y * k + width + time_step ) {
    o *= strength;
  }
  ALPHA_TEST(o);
  gl_FragColor = o;
}
    }%
    