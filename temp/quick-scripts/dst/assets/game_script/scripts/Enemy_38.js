
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/game_script/scripts/Enemy_38.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '9280d0B8z9BbKINukzjYhj2', 'Enemy_38');
// game_script/scripts/Enemy_38.js

"use strict";

var o;

var $eventManager = require("./EventManager");

var $globalParam = require("./GlobalParam");

var $localEventName = require("./LocalEventName");

var $baseBullet = require("./BaseBullet");

var $gameContext = require("./GameContext");

var $baseEnemy = require("./BaseEnemy");

var $healthBar = require("./HealthBar");

var f = cc._decorator;
var h = f.ccclass;
var m = f.property;

var y = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    e.healthBar = null;
    e.createEnemyId = 42;
    return e;
  }

  __extends(e, t);

  e.prototype.initEnemy = function (e, i, o) {
    if (void 0 === o) {
      o = 0;
    }

    t.prototype.initEnemy.call(this, e, i, o);
    this.statusManager.clear();
    this.statusManager.specialityAtkAdd.set($baseBullet.BulletSpeciality.wind, this.config.value[0]);

    if (this.healthBar) {
      this.healthBar.init(this.statusManager.hp, e.hp_num);
    }
  };

  e.prototype.sufferAttack = function (e, i) {
    if (this.statusManager.isDie) {
      return !1;
    }

    var o = t.prototype.sufferAttack.call(this, e, i);

    if (this.healthBar) {
      this.healthBar.render(this.statusManager.hp);
    }

    return o;
  };

  e.prototype.dieAnim = function () {
    return Math.abs(this.getPosition().y - $globalParam["default"].doorY) >= this.config.value[1] ? (this.statusManager.isDie = !0, this.skin.node.opacity = 1, this.throwEnemy(), !1) : t.prototype.dieAnim.call(this);
  };

  e.prototype.throwEnemy = function () {
    var t = this;
    $gameContext["default"].ins.removeEnemy(this);
    this.skin.off(dragonBones.EventObject.COMPLETE);
    this.skin.timeScale = $gameContext["default"].ins.gameRatio;
    this.skin.playAnimation("diu1", 1);
    this.unscheduleAllCallbacks();
    this.skin.once(dragonBones.EventObject.COMPLETE, function () {
      $eventManager["default"].send($localEventName["default"].CREATE_ENEMY, t.createEnemyId, cc.v3(t.getPosition().x, t.getPosition().y + 25), t.Avoid_injury, t.lot);

      if (!(2 !== t.config.monster_type && 3 !== t.config.monster_type)) {
        t.bossChooseSKill();
      }

      t.removeSelf();
    }, this);
  };

  __decorate([m($healthBar["default"])], e.prototype, "healthBar", void 0);

  __decorate([m], e.prototype, "createEnemyId", void 0);

  return __decorate([h], e);
}($baseEnemy["default"]);

exports["default"] = y;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcZ2FtZV9zY3JpcHRcXHNjcmlwdHNcXEVuZW15XzM4LmpzIl0sIm5hbWVzIjpbIm8iLCIkZXZlbnRNYW5hZ2VyIiwicmVxdWlyZSIsIiRnbG9iYWxQYXJhbSIsIiRsb2NhbEV2ZW50TmFtZSIsIiRiYXNlQnVsbGV0IiwiJGdhbWVDb250ZXh0IiwiJGJhc2VFbmVteSIsIiRoZWFsdGhCYXIiLCJmIiwiY2MiLCJfZGVjb3JhdG9yIiwiaCIsImNjY2xhc3MiLCJtIiwicHJvcGVydHkiLCJ5IiwidCIsImUiLCJhcHBseSIsImFyZ3VtZW50cyIsImhlYWx0aEJhciIsImNyZWF0ZUVuZW15SWQiLCJfX2V4dGVuZHMiLCJwcm90b3R5cGUiLCJpbml0RW5lbXkiLCJpIiwiY2FsbCIsInN0YXR1c01hbmFnZXIiLCJjbGVhciIsInNwZWNpYWxpdHlBdGtBZGQiLCJzZXQiLCJCdWxsZXRTcGVjaWFsaXR5Iiwid2luZCIsImNvbmZpZyIsInZhbHVlIiwiaW5pdCIsImhwIiwiaHBfbnVtIiwic3VmZmVyQXR0YWNrIiwiaXNEaWUiLCJyZW5kZXIiLCJkaWVBbmltIiwiTWF0aCIsImFicyIsImdldFBvc2l0aW9uIiwiZG9vclkiLCJza2luIiwibm9kZSIsIm9wYWNpdHkiLCJ0aHJvd0VuZW15IiwiaW5zIiwicmVtb3ZlRW5lbXkiLCJvZmYiLCJkcmFnb25Cb25lcyIsIkV2ZW50T2JqZWN0IiwiQ09NUExFVEUiLCJ0aW1lU2NhbGUiLCJnYW1lUmF0aW8iLCJwbGF5QW5pbWF0aW9uIiwidW5zY2hlZHVsZUFsbENhbGxiYWNrcyIsIm9uY2UiLCJzZW5kIiwiQ1JFQVRFX0VORU1ZIiwidjMiLCJ4IiwiQXZvaWRfaW5qdXJ5IiwibG90IiwibW9uc3Rlcl90eXBlIiwiYm9zc0Nob29zZVNLaWxsIiwicmVtb3ZlU2VsZiIsIl9fZGVjb3JhdGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLENBQUo7O0FBQ0EsSUFBSUMsYUFB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Q0FBQ2lCLE1BQUYsQ0FBU2tDLFlBQWhELENBQUosRUFBbUU7UUFDL0RuRCxDQUFDLENBQUNvRCxlQUFGO01BQ0g7O01BQ0RwRCxDQUFDLENBQUNxRCxVQUFGO0lBQ0gsQ0FkTCxFQWVJLElBZko7RUFpQkgsQ0F4QkQ7O0VBeUJBQyxVQUFVLENBQUMsQ0FBQ3pELENBQUMsQ0FBQ04sVUFBVSxXQUFYLENBQUYsQ0FBRCxFQUEwQlUsQ0FBQyxDQUFDTSxTQUE1QixFQUF1QyxXQUF2QyxFQUFvRCxLQUFLLENBQXpELENBQVY7O0VBQ0ErQyxVQUFVLENBQUMsQ0FBQ3pELENBQUQsQ0FBRCxFQUFNSSxDQUFDLENBQUNNLFNBQVIsRUFBbUIsZUFBbkIsRUFBb0MsS0FBSyxDQUF6QyxDQUFWOztFQUNBLE9BQU8rQyxVQUFVLENBQUMsQ0FBQzNELENBQUQsQ0FBRCxFQUFNTSxDQUFOLENBQWpCO0FBQ0gsQ0E5RE8sQ0E4RExYLFVBQVUsV0E5REwsQ0FBUjs7QUErREFpRSxPQUFPLFdBQVAsR0FBa0J4RCxDQUFsQiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIG87XHJcbnZhciAkZXZlbnRNYW5hZ2VyID0gcmVxdWlyZShcIi4vRXZlbnRNYW5hZ2VyXCIpO1xyXG52YXIgJGdsb2JhbFBhcmFtID0gcmVxdWlyZShcIi4vR2xvYmFsUGFyYW1cIik7XHJcbnZhciAkbG9jYWxFdmVudE5hbWUgPSByZXF1aXJlKFwiLi9Mb2NhbEV2ZW50TmFtZVwiKTtcclxudmFyICRiYXNlQnVsbGV0ID0gcmVxdWlyZShcIi4vQmFzZUJ1bGxldFwiKTtcclxudmFyICRnYW1lQ29udGV4dCA9IHJlcXVpcmUoXCIuL0dhbWVDb250ZXh0XCIpO1xyXG52YXIgJGJhc2VFbmVteSA9IHJlcXVpcmUoXCIuL0Jhc2VFbmVteVwiKTtcclxudmFyICRoZWFsdGhCYXIgPSByZXF1aXJlKFwiLi9IZWFsdGhCYXJcIik7XHJcbnZhciBmID0gY2MuX2RlY29yYXRvcjtcclxudmFyIGggPSBmLmNjY2xhc3M7XHJcbnZhciBtID0gZi5wcm9wZXJ0eTtcclxudmFyIHkgPSAoZnVuY3Rpb24gKHQpIHtcclxuICAgIGZ1bmN0aW9uIGUoKSB7XHJcbiAgICAgICAgdmFyIGUgPSAobnVsbCAhPT0gdCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHx8IHRoaXM7XHJcbiAgICAgICAgZS5oZWFsdGhCYXIgPSBudWxsO1xyXG4gICAgICAgIGUuY3JlYXRlRW5lbXlJZCA9IDQyO1xyXG4gICAgICAgIHJldHVybiBlO1xyXG4gICAgfVxyXG4gICAgX19leHRlbmRzKGUsIHQpO1xyXG4gICAgZS5wcm90b3R5cGUuaW5pdEVuZW15ID0gZnVuY3Rpb24gKGUsIGksIG8pIHtcclxuICAgICAgICBpZiAodm9pZCAwID09PSBvKSB7XHJcbiAgICAgICAgICAgIG8gPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0LnByb3RvdHlwZS5pbml0RW5lbXkuY2FsbCh0aGlzLCBlLCBpLCBvKTtcclxuICAgICAgICB0aGlzLnN0YXR1c01hbmFnZXIuY2xlYXIoKTtcclxuICAgICAgICB0aGlzLnN0YXR1c01hbmFnZXIuc3BlY2lhbGl0eUF0a0FkZC5zZXQoJGJhc2VCdWxsZXQuQnVsbGV0U3BlY2lhbGl0eS53aW5kLCB0aGlzLmNvbmZpZy52YWx1ZVswXSk7XHJcbiAgICAgICAgaWYgKHRoaXMuaGVhbHRoQmFyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhbHRoQmFyLmluaXQodGhpcy5zdGF0dXNNYW5hZ2VyLmhwLCBlLmhwX251bSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGUucHJvdG90eXBlLnN1ZmZlckF0dGFjayA9IGZ1bmN0aW9uIChlLCBpKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzTWFuYWdlci5pc0RpZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gITE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBvID0gdC5wcm90b3R5cGUuc3VmZmVyQXR0YWNrLmNhbGwodGhpcywgZSwgaSk7XHJcbiAgICAgICAgaWYgKHRoaXMuaGVhbHRoQmFyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhbHRoQmFyLnJlbmRlcih0aGlzLnN0YXR1c01hbmFnZXIuaHApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbztcclxuICAgIH07XHJcbiAgICBlLnByb3RvdHlwZS5kaWVBbmltID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmFicyh0aGlzLmdldFBvc2l0aW9uKCkueSAtICRnbG9iYWxQYXJhbS5kZWZhdWx0LmRvb3JZKSA+PSB0aGlzLmNvbmZpZy52YWx1ZVsxXVxyXG4gICAgICAgICAgICA/ICgodGhpcy5zdGF0dXNNYW5hZ2VyLmlzRGllID0gITApLCAodGhpcy5za2luLm5vZGUub3BhY2l0eSA9IDEpLCB0aGlzLnRocm93RW5lbXkoKSwgITEpXHJcbiAgICAgICAgICAgIDogdC5wcm90b3R5cGUuZGllQW5pbS5jYWxsKHRoaXMpO1xyXG4gICAgfTtcclxuICAgIGUucHJvdG90eXBlLnRocm93RW5lbXkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xyXG4gICAgICAgICRnYW1lQ29udGV4dC5kZWZhdWx0Lmlucy5yZW1vdmVFbmVteSh0aGlzKTtcclxuICAgICAgICB0aGlzLnNraW4ub2ZmKGRyYWdvbkJvbmVzLkV2ZW50T2JqZWN0LkNPTVBMRVRFKTtcclxuICAgICAgICB0aGlzLnNraW4udGltZVNjYWxlID0gJGdhbWVDb250ZXh0LmRlZmF1bHQuaW5zLmdhbWVSYXRpbztcclxuICAgICAgICB0aGlzLnNraW4ucGxheUFuaW1hdGlvbihcImRpdTFcIiwgMSk7XHJcbiAgICAgICAgdGhpcy51bnNjaGVkdWxlQWxsQ2FsbGJhY2tzKCk7XHJcbiAgICAgICAgdGhpcy5za2luLm9uY2UoXHJcbiAgICAgICAgICAgIGRyYWdvbkJvbmVzLkV2ZW50T2JqZWN0LkNPTVBMRVRFLFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkZXZlbnRNYW5hZ2VyLmRlZmF1bHQuc2VuZChcclxuICAgICAgICAgICAgICAgICAgICAkbG9jYWxFdmVudE5hbWUuZGVmYXVsdC5DUkVBVEVfRU5FTVksXHJcbiAgICAgICAgICAgICAgICAgICAgdC5jcmVhdGVFbmVteUlkLFxyXG4gICAgICAgICAgICAgICAgICAgIGNjLnYzKHQuZ2V0UG9zaXRpb24oKS54LCB0LmdldFBvc2l0aW9uKCkueSArIDI1KSxcclxuICAgICAgICAgICAgICAgICAgICB0LkF2b2lkX2luanVyeSxcclxuICAgICAgICAgICAgICAgICAgICB0LmxvdFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGlmICghKDIgIT09IHQuY29uZmlnLm1vbnN0ZXJfdHlwZSAmJiAzICE9PSB0LmNvbmZpZy5tb25zdGVyX3R5cGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5ib3NzQ2hvb3NlU0tpbGwoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHQucmVtb3ZlU2VsZigpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0aGlzXHJcbiAgICAgICAgKTtcclxuICAgIH07XHJcbiAgICBfX2RlY29yYXRlKFttKCRoZWFsdGhCYXIuZGVmYXVsdCldLCBlLnByb3RvdHlwZSwgXCJoZWFsdGhCYXJcIiwgdm9pZCAwKTtcclxuICAgIF9fZGVjb3JhdGUoW21dLCBlLnByb3RvdHlwZSwgXCJjcmVhdGVFbmVteUlkXCIsIHZvaWQgMCk7XHJcbiAgICByZXR1cm4gX19kZWNvcmF0ZShbaF0sIGUpO1xyXG59KSgkYmFzZUVuZW15LmRlZmF1bHQpO1xyXG5leHBvcnRzLmRlZmF1bHQgPSB5O1xyXG4iXX0=