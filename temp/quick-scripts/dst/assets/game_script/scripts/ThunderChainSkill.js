
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/game_script/scripts/ThunderChainSkill.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '9d2fdW9cktJlrfJ04ck8mlq', 'ThunderChainSkill');
// game_script/scripts/ThunderChainSkill.js

"use strict";

var o;
exports.ThunderChainSkill = void 0;

var $skillContext = require("./SkillContext");

var $gameSkillInfo = require("./GameSkillInfo");

var a = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    e.releaseCount = 1;
    e.count = 0;
    e.paralysisTime = 0;
    e.speed = 0;
    e.bombAtk = [0, 0, 0, 1];
    e.bombRange = 0;
    e.bombParalysisTime = 0;
    e.releaseProbability = 0;
    e.killCount = 0;
    e.hitStun = [];
    e.adsorb = 0;
    e.adsorbSize = 0;
    return e;
  }

  __extends(e, t);

  e.prototype.chooseSkill = function (t) {
    153 === t.id ? (this.count = $skillContext["default"].Ins.getBounceCount(t), this.skillCD[$gameSkillInfo.Skill4Param.BASIC] = $skillContext["default"].Ins.getSkillCD(t), this.paralysisTime = t.add_sx[2], this.speed = t.add_sx[3], this.skillAtkRange[$gameSkillInfo.Skill4Param.BASIC] = t.add_sx[4], this.skillAtk[$gameSkillInfo.Skill4Param.BASIC] = $skillContext["default"].Ins.getBasicAtk(t), this.caculateFinal(this.skillCD, !1), this.caculateFinal(this.skillAtkRange), this.caculateFinal(this.skillAtk)) : 154 === t.id ? this.updateAndCalculate(this.skillAtk, t.add_sx[0], $gameSkillInfo.Skill4Param.ADD) : 155 === t.id ? (this.updateAndCalculate(this.skillAtk, t.add_sx[0], $gameSkillInfo.Skill4Param.ADD), this.paralysisTime += t.add_sx[1]) : 156 === t.id ? this.releaseCount += t.add_sx[0] : 157 === t.id ? (this.updateAndCalculate(this.skillAtk, t.add_sx[0], $gameSkillInfo.Skill4Param.ADD), this.count += t.add_sx[1]) : 158 === t.id ? (this.bombAtk[$gameSkillInfo.Skill4Param.BASIC] = this.getBasicAtk(t.add_sx[0]), this.caculateFinal(this.bombAtk), this.bombRange = t.add_sx[1]) : 159 === t.id ? (this.updateAndCalculate(this.bombAtk, t.add_sx[0], $gameSkillInfo.Skill4Param.ADD), this.bombParalysisTime += t.add_sx[1]) : 161 === t.id ? this.updateAndCalculate(this.skillAtk, t.add_sx[0], $gameSkillInfo.Skill4Param.ADD) : 162 === t.id ? this.releaseProbability += t.add_sx[0] : 163 === t.id ? this.killCount += t.add_sx[0] : 170 === t.id && (this.adsorb = t.add_sx[0], this.adsorbSize = t.add_sx[1]);
  };

  e.prototype.toString = function () {
    return t.prototype.toString.call(this) + "\n        释放次数:" + this.releaseCount + "\n        弹射次数:" + this.count + "\n        麻痹时间:" + this.paralysisTime + "\n        速度:" + this.speed + "\n        爆炸伤害:" + this.bombAtk + "\n        爆炸范围:" + this.bombRange + "\n        爆炸麻痹时间:" + this.bombParalysisTime + "\n        再次释放概率:" + this.releaseProbability + "\n        击杀后弹射次数:" + this.killCount + "\n        命中眩晕敌人buff[时间，伤害]:" + this.hitStun + "\n        牵引力:" + this.adsorb + "\n        牵引力大小:" + this.adsorbSize + "\n        ";
  };

  return e;
}(require("./BaseSkill").BaseSkill);

exports.ThunderChainSkill = a;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcZ2FtZV9zY3JpcHRcXHNjcmlwdHNcXFRodW5kZXJDaGFpblNraWxsLmpzIl0sIm5hbWVzIjpbIm8iLCJleHBvcnRzIiwiVGh1bmRlckNoYWluU2tpbGwiLCIkc2tpbGxDb250ZXh0IiwicmVxdWlyZSIsIiRnYW1lU2tpbGxJbmZvIiwiYSIsInQiLCJlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJyZWxlYXNlQ291bnQiLCJjb3VudCIsInBhcmFseXNpc1RpbWUiLCJzcGVlZCIsImJvbWJBdGsiLCJib21iUmFuZ2UiLCJib21iUGFyYWx5c2lzVGltZSIsInJlbGVhc2VQcm9iYWJpbGl0eSIsImtpbGxDb3VudCIsImhpdFN0dW4iLCJhZHNvcmIiLCJhZHNvcmJTaXplIiwiX19leHRlbmRzIiwicHJvdG90eXBlIiwiY2hvb3NlU2tpbGwiLCJpZCIsIklucyIsImdldEJvdW5jZUNvdW50Iiwic2tpbGxDRCIsIlNraWxsNFBhcmFtIiwiQkFTSUMiLCJnZXRTa2lsbENEIiwiYWRkX3N4Iiwic2tpbGxBdGtSYW5nZSIsInNraWxsQXRrIiwiZ2V0QmFzaWNBdGsiLCJjYWN1bGF0ZUZpbmFsIiwidXBkYXRlQW5kQ2FsY3VsYXRlIiwiQUREIiwidG9TdHJpbmciLCJjYWxsIiwiQmFzZVNraWxsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLENBQUo7QUFDQUMsT0FBTyxDQUFDQyxpQkFBUixHQUE0QixLQUFLLENBQWpDOztBQUNBLElBQUlDLGFBQWEsR0FBR0MsT0FBTyxDQUFDLGdCQUFELENBQTNCOztBQUNBLElBQUlDLGNBQWMsR0FBR0QsT0FBTyxDQUFDLGlCQUFELENBQTVCOztBQUNBLElBQUlFLENBQUMsR0FBSSxVQUFVQyxDQUFWLEVBQWE7RUFDbEIsU0FBU0MsQ0FBVCxHQUFhO0lBQ1QsSUFBSUEsQ0FBQyxHQUFJLFNBQVNELENBQVQsSUFBY0EsQ0FBQyxDQUFDRSxLQUFGLENBQVEsSUFBUixFQUFjQyxTQUFkLENBQWYsSUFBNEMsSUFBcEQ7SUFDQUYsQ0FBQyxDQUFDRyxZQUFGLEdBQWlCLENBQWpCO0lBQ0FILENBQUMsQ0FBQ0ksS0FBRixHQUFVLENBQVY7SUFDQUosQ0FBQyxDQUFDSyxhQUFGLEdBQWtCLENBQWxCO0lBQ0FMLENBQUMsQ0FBQ00sS0FBRixHQUFVLENBQVY7SUFDQU4sQ0FBQyxDQUFDTyxPQUFGLEdBQVksQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLENBQVo7SUFDQVAsQ0FBQyxDQUFDUSxTQUFGLEdBQWMsQ0FBZDtJQUNBUixDQUFDLENBQUNTLGlCQUFGLEdBQXNCLENBQXRCO0lBQ0FULENBQUMsQ0FBQ1Usa0JBQUYsR0FBdUIsQ0FBdkI7SUFDQVYsQ0FBQyxDQUFDVyxTQUFGLEdBQWMsQ0FBZDtJQUNBWCxDQUFDLENBQUNZLE9BQUYsR0FBWSxFQUFaO0lBQ0FaLENBQUMsQ0FBQ2EsTUFBRixHQUFXLENBQVg7SUFDQWIsQ0FBQyxDQUFDYyxVQUFGLEdBQWUsQ0FBZjtJQUNBLE9BQU9kLENBQVA7RUFDSDs7RUFDRGUsU0FBUyxDQUFDZixDQUFELEVBQUlELENBQUosQ0FBVDs7RUFDQUMsQ0FBQyxDQUFDZ0IsU0FBRixDQUFZQyxXQUFaLEdBQTBCLFVBQVVsQixDQUFWLEVBQWE7SUFDbkMsUUFBUUEsQ0FBQyxDQUFDbUIsRUFBVixJQUNRLEtBQUtkLEtBQUwsR0FBYVQsYUFBYSxXQUFiLENBQXNCd0IsR0FBdEIsQ0FBMEJDLGNBQTFCLENBQXlDckIsQ0FBekMsQ0FBZCxFQUNBLEtBQUtzQixPQUFMLENBQWF4QixjQUFjLENBQUN5QixXQUFmLENBQTJCQyxLQUF4QyxJQUFpRDVCLGFBQWEsV0FBYixDQUFzQndCLEdBQXRCLENBQTBCSyxVQUExQixDQUFxQ3pCLENBQXJDLENBRGpELEVBRUEsS0FBS00sYUFBTCxHQUFxQk4sQ0FBQyxDQUFDMEIsTUFBRixDQUFTLENBQVQsQ0FGckIsRUFHQSxLQUFLbkIsS0FBTCxHQUFhUCxDQUFDLENBQUMwQixNQUFGLENBQVMsQ0FBVCxDQUhiLEVBSUEsS0FBS0MsYUFBTCxDQUFtQjdCLGNBQWMsQ0FBQ3lCLFdBQWYsQ0FBMkJDLEtBQTlDLElBQXVEeEIsQ0FBQyxDQUFDMEIsTUFBRixDQUFTLENBQVQsQ0FKdkQsRUFLQSxLQUFLRSxRQUFMLENBQWM5QixjQUFjLENBQUN5QixXQUFmLENBQTJCQyxLQUF6QyxJQUFrRDVCLGFBQWEsV0FBYixDQUFzQndCLEdBQXRCLENBQTBCUyxXQUExQixDQUFzQzdCLENBQXRDLENBTGxELEVBTUQsS0FBSzhCLGFBQUwsQ0FBbUIsS0FBS1IsT0FBeEIsRUFBaUMsQ0FBQyxDQUFsQyxDQU5DLEVBT0QsS0FBS1EsYUFBTCxDQUFtQixLQUFLSCxhQUF4QixDQVBDLEVBUUQsS0FBS0csYUFBTCxDQUFtQixLQUFLRixRQUF4QixDQVROLElBVU0sUUFBUTVCLENBQUMsQ0FBQ21CLEVBQVYsR0FDQSxLQUFLWSxrQkFBTCxDQUF3QixLQUFLSCxRQUE3QixFQUF1QzVCLENBQUMsQ0FBQzBCLE1BQUYsQ0FBUyxDQUFULENBQXZDLEVBQW9ENUIsY0FBYyxDQUFDeUIsV0FBZixDQUEyQlMsR0FBL0UsQ0FEQSxHQUVBLFFBQVFoQyxDQUFDLENBQUNtQixFQUFWLElBQ0MsS0FBS1ksa0JBQUwsQ0FBd0IsS0FBS0gsUUFBN0IsRUFBdUM1QixDQUFDLENBQUMwQixNQUFGLENBQVMsQ0FBVCxDQUF2QyxFQUFvRDVCLGNBQWMsQ0FBQ3lCLFdBQWYsQ0FBMkJTLEdBQS9FLEdBQ0EsS0FBSzFCLGFBQUwsSUFBc0JOLENBQUMsQ0FBQzBCLE1BQUYsQ0FBUyxDQUFULENBRnZCLElBR0EsUUFBUTFCLENBQUMsQ0FBQ21CLEVBQVYsR0FDQyxLQUFLZixZQUFMLElBQXFCSixDQUFDLENBQUMwQixNQUFGLENBQVMsQ0FBVCxDQUR0QixHQUVBLFFBQVExQixDQUFDLENBQUNtQixFQUFWLElBQ0MsS0FBS1ksa0JBQUwsQ0FBd0IsS0FBS0gsUUFBN0IsRUFBdUM1QixDQUFDLENBQUMwQixNQUFGLENBQVMsQ0FBVCxDQUF2QyxFQUFvRDVCLGNBQWMsQ0FBQ3lCLFdBQWYsQ0FBMkJTLEdBQS9FLEdBQ0EsS0FBSzNCLEtBQUwsSUFBY0wsQ0FBQyxDQUFDMEIsTUFBRixDQUFTLENBQVQsQ0FGZixJQUdBLFFBQVExQixDQUFDLENBQUNtQixFQUFWLElBQ0UsS0FBS1gsT0FBTCxDQUFhVixjQUFjLENBQUN5QixXQUFmLENBQTJCQyxLQUF4QyxJQUFpRCxLQUFLSyxXQUFMLENBQWlCN0IsQ0FBQyxDQUFDMEIsTUFBRixDQUFTLENBQVQsQ0FBakIsQ0FBbEQsRUFDRCxLQUFLSSxhQUFMLENBQW1CLEtBQUt0QixPQUF4QixDQURDLEVBRUEsS0FBS0MsU0FBTCxHQUFpQlQsQ0FBQyxDQUFDMEIsTUFBRixDQUFTLENBQVQsQ0FIbEIsSUFJQSxRQUFRMUIsQ0FBQyxDQUFDbUIsRUFBVixJQUNDLEtBQUtZLGtCQUFMLENBQXdCLEtBQUt2QixPQUE3QixFQUFzQ1IsQ0FBQyxDQUFDMEIsTUFBRixDQUFTLENBQVQsQ0FBdEMsRUFBbUQ1QixjQUFjLENBQUN5QixXQUFmLENBQTJCUyxHQUE5RSxHQUNBLEtBQUt0QixpQkFBTCxJQUEwQlYsQ0FBQyxDQUFDMEIsTUFBRixDQUFTLENBQVQsQ0FGM0IsSUFHQSxRQUFRMUIsQ0FBQyxDQUFDbUIsRUFBVixHQUNBLEtBQUtZLGtCQUFMLENBQXdCLEtBQUtILFFBQTdCLEVBQXVDNUIsQ0FBQyxDQUFDMEIsTUFBRixDQUFTLENBQVQsQ0FBdkMsRUFBb0Q1QixjQUFjLENBQUN5QixXQUFmLENBQTJCUyxHQUEvRSxDQURBLEdBRUEsUUFBUWhDLENBQUMsQ0FBQ21CLEVBQVYsR0FDQyxLQUFLUixrQkFBTCxJQUEyQlgsQ0FBQyxDQUFDMEIsTUFBRixDQUFTLENBQVQsQ0FENUIsR0FFQSxRQUFRMUIsQ0FBQyxDQUFDbUIsRUFBVixHQUNDLEtBQUtQLFNBQUwsSUFBa0JaLENBQUMsQ0FBQzBCLE1BQUYsQ0FBUyxDQUFULENBRG5CLEdBRUEsUUFBUTFCLENBQUMsQ0FBQ21CLEVBQVYsS0FBa0IsS0FBS0wsTUFBTCxHQUFjZCxDQUFDLENBQUMwQixNQUFGLENBQVMsQ0FBVCxDQUFmLEVBQThCLEtBQUtYLFVBQUwsR0FBa0JmLENBQUMsQ0FBQzBCLE1BQUYsQ0FBUyxDQUFULENBQWpFLENBakNOO0VBa0NILENBbkNEOztFQW9DQXpCLENBQUMsQ0FBQ2dCLFNBQUYsQ0FBWWdCLFFBQVosR0FBdUIsWUFBWTtJQUMvQixPQUNJakMsQ0FBQyxDQUFDaUIsU0FBRixDQUFZZ0IsUUFBWixDQUFxQkMsSUFBckIsQ0FBMEIsSUFBMUIsSUFDQSxpQkFEQSxHQUVBLEtBQUs5QixZQUZMLEdBR0EsaUJBSEEsR0FJQSxLQUFLQyxLQUpMLEdBS0EsaUJBTEEsR0FNQSxLQUFLQyxhQU5MLEdBT0EsZUFQQSxHQVFBLEtBQUtDLEtBUkwsR0FTQSxpQkFUQSxHQVVBLEtBQUtDLE9BVkwsR0FXQSxpQkFYQSxHQVlBLEtBQUtDLFNBWkwsR0FhQSxtQkFiQSxHQWNBLEtBQUtDLGlCQWRMLEdBZUEsbUJBZkEsR0FnQkEsS0FBS0Msa0JBaEJMLEdBaUJBLG9CQWpCQSxHQWtCQSxLQUFLQyxTQWxCTCxHQW1CQSw4QkFuQkEsR0FvQkEsS0FBS0MsT0FwQkwsR0FxQkEsZ0JBckJBLEdBc0JBLEtBQUtDLE1BdEJMLEdBdUJBLGtCQXZCQSxHQXdCQSxLQUFLQyxVQXhCTCxHQXlCQSxZQTFCSjtFQTRCSCxDQTdCRDs7RUE4QkEsT0FBT2QsQ0FBUDtBQUNILENBckZPLENBcUZMSixPQUFPLENBQUMsYUFBRCxDQUFQLENBQXVCc0MsU0FyRmxCLENBQVI7O0FBc0ZBekMsT0FBTyxDQUFDQyxpQkFBUixHQUE0QkksQ0FBNUIiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbInZhciBvO1xyXG5leHBvcnRzLlRodW5kZXJDaGFpblNraWxsID0gdm9pZCAwO1xyXG52YXIgJHNraWxsQ29udGV4dCA9IHJlcXVpcmUoXCIuL1NraWxsQ29udGV4dFwiKTtcclxudmFyICRnYW1lU2tpbGxJbmZvID0gcmVxdWlyZShcIi4vR2FtZVNraWxsSW5mb1wiKTtcclxudmFyIGEgPSAoZnVuY3Rpb24gKHQpIHtcclxuICAgIGZ1bmN0aW9uIGUoKSB7XHJcbiAgICAgICAgdmFyIGUgPSAobnVsbCAhPT0gdCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHx8IHRoaXM7XHJcbiAgICAgICAgZS5yZWxlYXNlQ291bnQgPSAxO1xyXG4gICAgICAgIGUuY291bnQgPSAwO1xyXG4gICAgICAgIGUucGFyYWx5c2lzVGltZSA9IDA7XHJcbiAgICAgICAgZS5zcGVlZCA9IDA7XHJcbiAgICAgICAgZS5ib21iQXRrID0gWzAsIDAsIDAsIDFdO1xyXG4gICAgICAgIGUuYm9tYlJhbmdlID0gMDtcclxuICAgICAgICBlLmJvbWJQYXJhbHlzaXNUaW1lID0gMDtcclxuICAgICAgICBlLnJlbGVhc2VQcm9iYWJpbGl0eSA9IDA7XHJcbiAgICAgICAgZS5raWxsQ291bnQgPSAwO1xyXG4gICAgICAgIGUuaGl0U3R1biA9IFtdO1xyXG4gICAgICAgIGUuYWRzb3JiID0gMDtcclxuICAgICAgICBlLmFkc29yYlNpemUgPSAwO1xyXG4gICAgICAgIHJldHVybiBlO1xyXG4gICAgfVxyXG4gICAgX19leHRlbmRzKGUsIHQpO1xyXG4gICAgZS5wcm90b3R5cGUuY2hvb3NlU2tpbGwgPSBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgIDE1MyA9PT0gdC5pZFxyXG4gICAgICAgICAgICA/ICgodGhpcy5jb3VudCA9ICRza2lsbENvbnRleHQuZGVmYXVsdC5JbnMuZ2V0Qm91bmNlQ291bnQodCkpLFxyXG4gICAgICAgICAgICAgICh0aGlzLnNraWxsQ0RbJGdhbWVTa2lsbEluZm8uU2tpbGw0UGFyYW0uQkFTSUNdID0gJHNraWxsQ29udGV4dC5kZWZhdWx0Lklucy5nZXRTa2lsbENEKHQpKSxcclxuICAgICAgICAgICAgICAodGhpcy5wYXJhbHlzaXNUaW1lID0gdC5hZGRfc3hbMl0pLFxyXG4gICAgICAgICAgICAgICh0aGlzLnNwZWVkID0gdC5hZGRfc3hbM10pLFxyXG4gICAgICAgICAgICAgICh0aGlzLnNraWxsQXRrUmFuZ2VbJGdhbWVTa2lsbEluZm8uU2tpbGw0UGFyYW0uQkFTSUNdID0gdC5hZGRfc3hbNF0pLFxyXG4gICAgICAgICAgICAgICh0aGlzLnNraWxsQXRrWyRnYW1lU2tpbGxJbmZvLlNraWxsNFBhcmFtLkJBU0lDXSA9ICRza2lsbENvbnRleHQuZGVmYXVsdC5JbnMuZ2V0QmFzaWNBdGsodCkpLFxyXG4gICAgICAgICAgICAgIHRoaXMuY2FjdWxhdGVGaW5hbCh0aGlzLnNraWxsQ0QsICExKSxcclxuICAgICAgICAgICAgICB0aGlzLmNhY3VsYXRlRmluYWwodGhpcy5za2lsbEF0a1JhbmdlKSxcclxuICAgICAgICAgICAgICB0aGlzLmNhY3VsYXRlRmluYWwodGhpcy5za2lsbEF0aykpXHJcbiAgICAgICAgICAgIDogMTU0ID09PSB0LmlkXHJcbiAgICAgICAgICAgID8gdGhpcy51cGRhdGVBbmRDYWxjdWxhdGUodGhpcy5za2lsbEF0aywgdC5hZGRfc3hbMF0sICRnYW1lU2tpbGxJbmZvLlNraWxsNFBhcmFtLkFERClcclxuICAgICAgICAgICAgOiAxNTUgPT09IHQuaWRcclxuICAgICAgICAgICAgPyAodGhpcy51cGRhdGVBbmRDYWxjdWxhdGUodGhpcy5za2lsbEF0aywgdC5hZGRfc3hbMF0sICRnYW1lU2tpbGxJbmZvLlNraWxsNFBhcmFtLkFERCksXHJcbiAgICAgICAgICAgICAgKHRoaXMucGFyYWx5c2lzVGltZSArPSB0LmFkZF9zeFsxXSkpXHJcbiAgICAgICAgICAgIDogMTU2ID09PSB0LmlkXHJcbiAgICAgICAgICAgID8gKHRoaXMucmVsZWFzZUNvdW50ICs9IHQuYWRkX3N4WzBdKVxyXG4gICAgICAgICAgICA6IDE1NyA9PT0gdC5pZFxyXG4gICAgICAgICAgICA/ICh0aGlzLnVwZGF0ZUFuZENhbGN1bGF0ZSh0aGlzLnNraWxsQXRrLCB0LmFkZF9zeFswXSwgJGdhbWVTa2lsbEluZm8uU2tpbGw0UGFyYW0uQUREKSxcclxuICAgICAgICAgICAgICAodGhpcy5jb3VudCArPSB0LmFkZF9zeFsxXSkpXHJcbiAgICAgICAgICAgIDogMTU4ID09PSB0LmlkXHJcbiAgICAgICAgICAgID8gKCh0aGlzLmJvbWJBdGtbJGdhbWVTa2lsbEluZm8uU2tpbGw0UGFyYW0uQkFTSUNdID0gdGhpcy5nZXRCYXNpY0F0ayh0LmFkZF9zeFswXSkpLFxyXG4gICAgICAgICAgICAgIHRoaXMuY2FjdWxhdGVGaW5hbCh0aGlzLmJvbWJBdGspLFxyXG4gICAgICAgICAgICAgICh0aGlzLmJvbWJSYW5nZSA9IHQuYWRkX3N4WzFdKSlcclxuICAgICAgICAgICAgOiAxNTkgPT09IHQuaWRcclxuICAgICAgICAgICAgPyAodGhpcy51cGRhdGVBbmRDYWxjdWxhdGUodGhpcy5ib21iQXRrLCB0LmFkZF9zeFswXSwgJGdhbWVTa2lsbEluZm8uU2tpbGw0UGFyYW0uQUREKSxcclxuICAgICAgICAgICAgICAodGhpcy5ib21iUGFyYWx5c2lzVGltZSArPSB0LmFkZF9zeFsxXSkpXHJcbiAgICAgICAgICAgIDogMTYxID09PSB0LmlkXHJcbiAgICAgICAgICAgID8gdGhpcy51cGRhdGVBbmRDYWxjdWxhdGUodGhpcy5za2lsbEF0aywgdC5hZGRfc3hbMF0sICRnYW1lU2tpbGxJbmZvLlNraWxsNFBhcmFtLkFERClcclxuICAgICAgICAgICAgOiAxNjIgPT09IHQuaWRcclxuICAgICAgICAgICAgPyAodGhpcy5yZWxlYXNlUHJvYmFiaWxpdHkgKz0gdC5hZGRfc3hbMF0pXHJcbiAgICAgICAgICAgIDogMTYzID09PSB0LmlkXHJcbiAgICAgICAgICAgID8gKHRoaXMua2lsbENvdW50ICs9IHQuYWRkX3N4WzBdKVxyXG4gICAgICAgICAgICA6IDE3MCA9PT0gdC5pZCAmJiAoKHRoaXMuYWRzb3JiID0gdC5hZGRfc3hbMF0pLCAodGhpcy5hZHNvcmJTaXplID0gdC5hZGRfc3hbMV0pKTtcclxuICAgIH07XHJcbiAgICBlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICB0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMpICtcclxuICAgICAgICAgICAgXCJcXG4gICAgICAgIOmHiuaUvuasoeaVsDpcIiArXHJcbiAgICAgICAgICAgIHRoaXMucmVsZWFzZUNvdW50ICtcclxuICAgICAgICAgICAgXCJcXG4gICAgICAgIOW8ueWwhOasoeaVsDpcIiArXHJcbiAgICAgICAgICAgIHRoaXMuY291bnQgK1xyXG4gICAgICAgICAgICBcIlxcbiAgICAgICAg6bq755e55pe26Ze0OlwiICtcclxuICAgICAgICAgICAgdGhpcy5wYXJhbHlzaXNUaW1lICtcclxuICAgICAgICAgICAgXCJcXG4gICAgICAgIOmAn+W6pjpcIiArXHJcbiAgICAgICAgICAgIHRoaXMuc3BlZWQgK1xyXG4gICAgICAgICAgICBcIlxcbiAgICAgICAg54iG54K45Lyk5a6zOlwiICtcclxuICAgICAgICAgICAgdGhpcy5ib21iQXRrICtcclxuICAgICAgICAgICAgXCJcXG4gICAgICAgIOeIhueCuOiMg+WbtDpcIiArXHJcbiAgICAgICAgICAgIHRoaXMuYm9tYlJhbmdlICtcclxuICAgICAgICAgICAgXCJcXG4gICAgICAgIOeIhueCuOm6u+eXueaXtumXtDpcIiArXHJcbiAgICAgICAgICAgIHRoaXMuYm9tYlBhcmFseXNpc1RpbWUgK1xyXG4gICAgICAgICAgICBcIlxcbiAgICAgICAg5YaN5qyh6YeK5pS+5qaC546HOlwiICtcclxuICAgICAgICAgICAgdGhpcy5yZWxlYXNlUHJvYmFiaWxpdHkgK1xyXG4gICAgICAgICAgICBcIlxcbiAgICAgICAg5Ye75p2A5ZCO5by55bCE5qyh5pWwOlwiICtcclxuICAgICAgICAgICAgdGhpcy5raWxsQ291bnQgK1xyXG4gICAgICAgICAgICBcIlxcbiAgICAgICAg5ZG95Lit55yp5pmV5pWM5Lq6YnVmZlvml7bpl7TvvIzkvKTlrrNdOlwiICtcclxuICAgICAgICAgICAgdGhpcy5oaXRTdHVuICtcclxuICAgICAgICAgICAgXCJcXG4gICAgICAgIOeJteW8leWKmzpcIiArXHJcbiAgICAgICAgICAgIHRoaXMuYWRzb3JiICtcclxuICAgICAgICAgICAgXCJcXG4gICAgICAgIOeJteW8leWKm+Wkp+WwjzpcIiArXHJcbiAgICAgICAgICAgIHRoaXMuYWRzb3JiU2l6ZSArXHJcbiAgICAgICAgICAgIFwiXFxuICAgICAgICBcIlxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGU7XHJcbn0pKHJlcXVpcmUoXCIuL0Jhc2VTa2lsbFwiKS5CYXNlU2tpbGwpO1xyXG5leHBvcnRzLlRodW5kZXJDaGFpblNraWxsID0gYTtcclxuIl19